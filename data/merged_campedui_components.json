[
  {
    "component": "Accordion",
    "section": "Usage",
    "prompt": "On a FAQ page, import CampEdUI’s Accordion and render it so that only one panel can be expanded at a time—include the import statement and a simple accordion with two items.",
    "code": "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@camped-ui/accordion\";\n\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>"
  },
  {
    "component": "Alert",
    "section": "Examples → Default",
    "prompt": "When a profile update succeeds, display a default Alert in green that says “Profile saved”; show the import and JSX required.",
    "code": "import { Terminal } from \"lucide-react\"\n \nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@camped-ui/alert\"\n \nexport function AlertDemo() {\n  return (\n    <Alert>\n      <Terminal className=\"h-4 w-4\" />\n      <AlertTitle>Heads up!</AlertTitle>\n      <AlertDescription>\n        You can add components to your app using the cli.\n      </AlertDescription>\n    </Alert>\n  )\n}"
  },
  {
    "component": "Alert",
    "section": "Examples → Destructive",
    "prompt": "If a user tries to delete their account, render a destructive Alert in red that warns “This action is irreversible”; include import and JSX.",
    "code": "import { AlertCircle } from \"lucide-react\"\n \nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@camped-ui/alert\"\n \nexport function AlertDestructive() {\n  return (\n    <Alert variant=\"destructive\">\n      <AlertCircle className=\"h-4 w-4\" />\n      <AlertTitle>Error</AlertTitle>\n      <AlertDescription>\n        Your session has expired. Please log in again.\n      </AlertDescription>\n    </Alert>\n  )\n}"
  },
  {
    "component": "Alert",
    "section": "Usage",
    "prompt": "In a user-settings form, show a non-destructive Alert at the top with a blue info icon and a close button; include the import and minimal JSX.",
    "code": "import { Alert, AlertDescription, AlertTitle } from \"@camped-ui/alert\";\n\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>"
  },
  {
    "component": "Alert Dialog",
    "section": "Usage",
    "prompt": "In your React app, import the Alert Dialog component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@camped-ui/alert-dialog\";\n\n<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"
  },
  {
    "component": "Aspect Ratio",
    "section": "Usage",
    "prompt": "Embed a 16:9 YouTube video responsively in a blog post using CampEdUI’s AspectRatio; include the import and the JSX for an iframe inside an AspectRatio container.",
    "code": "import { AspectRatio } from \"@camped-ui/aspect-ratio\";\nimport Image from \"next/image\";\n\n<div className=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9}>\n    <Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>"
  },
  {
    "component": "Avatar",
    "section": "Usage",
    "prompt": "For a chat header, render a circular Avatar with a user image; if no image is provided, show the user’s initials—include the import and JSX.",
    "code": "import { Avatar, AvatarFallback, AvatarImage } from \"@camped-ui/avatar\";\n\n<Avatar>\n  <AvatarImage src=\"https://github.com/camped.png\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>"
  },
  {
    "component": "Badge",
    "section": "Examples → Default",
    "prompt": "Render a default Badge labeled “New” next to a product name; show the import and `<Badge>New</Badge>` JSX.",
    "code": "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeDemo() {\n  return <Badge>Badge</Badge>\n}"
  },
  {
    "component": "Badge",
    "section": "Examples → Destructive",
    "prompt": "If a user action is critical, show a destructive Badge with text “Remove” in red; include import and `<Badge variant=\"destructive\">Remove</Badge>`.",
    "code": "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeDestructive() {\n  return <Badge variant=\"destructive\">Destructive</Badge>\n}"
  },
  {
    "component": "Badge",
    "section": "Examples → Outline",
    "prompt": "Display an outlined Badge labeled “Pro” for premium users; include import and `<Badge variant=\"outline\">Pro</Badge>` JSX.",
    "code": "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeOutline() {\n  return <Badge variant=\"outline\">Outline</Badge>\n}"
  },
  {
    "component": "Badge",
    "section": "Examples → Secondary",
    "prompt": "When tagging a secondary feature, render a Badge with variant=`\"secondary\"` reading “Beta”; include import and JSX.",
    "code": "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeSecondary() {\n  return <Badge variant=\"secondary\">Secondary</Badge>\n}"
  },
  {
    "component": "Badge",
    "section": "Usage",
    "prompt": "On a notification dropdown, display a small Badge with text “3” in red; include the import and a `<Badge>` wrapped around the number.",
    "code": "import { Badge } from \"@camped-ui/badge\";\n\n<Badge variant=\"outline\">Badge</Badge>"
  },
  {
    "component": "Badge",
    "section": "Usage → Link",
    "prompt": "Create a link-styled Badge that wraps an anchor to `/profile`, using CampEdUI’s `badgeVariants`; include the import and the JSX for `<Badge asChild><Link …>`.",
    "code": "import { badgeVariants } from \"@camped-ui/badge\";\n\n<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>"
  },
  {
    "component": "Bento Grid",
    "section": "Examples → 2 Column Grid",
    "prompt": "In a gallery page, render a 2-column layout using `<BentoGrid columns={2}>` with two `<BentoGridItem>` blocks; include import and JSX.",
    "code": "import { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";\nimport {\n  IconClipboardCopy,\n  IconFileBroken,\n  IconSignature,\n  IconTableColumn,\n} from \"@tabler/icons-react\";\nimport React from \"react\";\n \nexport function BentoGridSecondDemo() {\n  return (\n    <BentoGrid className=\"max-w-4xl mx-auto md:auto-rows-[20rem]\">\n      {items.map((item, i) => (\n        <BentoGridItem\n          key={i}\n          title={item.title}\n          description={item.description}\n          header={item.header}\n          className={item.className}\n          icon={item.icon}\n        />\n      ))}\n    </BentoGrid>\n  );\n}\nconst Skeleton = () => (\n  <div className=\"flex flex-1 w-full h-full min-h-[6rem] rounded-xl   dark:bg-dot-white/[0.2] bg-dot-black/[0.2] [mask-image:radial-gradient(ellipse_at_center,white,transparent)]  border border-transparent dark:border-white/[0.2] bg-neutral-100 dark:bg-black\"></div>\n);\nconst items = [\n  {\n    title: \"The Dawn of Innovation\",\n    description: \"Explore the birth of groundbreaking ideas and inventions.\",\n    header: <Skeleton />,\n    className: \"md:col-span-2\",\n    icon: <IconClipboardCopy className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Digital Revolution\",\n    description: \"Dive into the transformative power of technology.\",\n    header: <Skeleton />,\n    className: \"md:col-span-1\",\n    icon: <IconFileBroken className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Art of Design\",\n    description: \"Discover the beauty of thoughtful and functional design.\",\n    header: <Skeleton />,\n    className: \"md:col-span-1\",\n    icon: <IconSignature className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Power of Communication\",\n    description:\n      \"Understand the impact of effective communication in our lives.\",\n    header: <Skeleton />,\n    className: \"md:col-span-2\",\n    icon: <IconTableColumn className=\"h-4 w-4 text-neutral-500\" />,\n  },\n];"
  },
  {
    "component": "Bento Grid",
    "section": "Examples → Populated with Header and Content",
    "prompt": "Create a `<BentoGrid>` where each item shows a header above some content, like “Sales” and “$12,000”; include import and complete JSX for a 3-item grid.",
    "code": "\"use client\";\n \nimport { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";\nimport { cn } from \"@camped-ui/lib\";\nimport {\n  IconBoxAlignRightFilled,\n  IconClipboardCopy,\n  IconFileBroken,\n  IconSignature,\n  IconTableColumn,\n} from \"@tabler/icons-react\";\nimport { motion } from \"framer-motion\";\nimport Image from \"next/image\";\nimport React from \"react\";\n \nexport function BentoGridThirdDemo() {\n  return (\n    <BentoGrid className=\"max-w-4xl mx-auto md:auto-rows-[20rem]\">\n      {items.map((item, i) => (\n        <BentoGridItem\n          key={i}\n          title={item.title}\n          description={item.description}\n          header={item.header}\n          className={cn(\"[&>p:text-lg]\", item.className)}\n          icon={item.icon}\n        />\n      ))}\n    </BentoGrid>\n  );\n}\n \nconst SkeletonOne = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n \n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonTwo = () => {\n  const variants = {\n    initial: {\n      width: 0,\n    },\n    animate: {\n      width: \"100%\",\n      transition: {\n        duration: 0.2,\n      },\n    },\n    hover: {\n      width: [\"0%\", \"100%\"],\n      transition: {\n        duration: 2,\n      },\n    },\n  };\n  const arr = new Array(6).fill(0);\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      {arr.map((_, i) => (\n        <motion.div\n          key={\"skelenton-two\" + i}\n          variants={variants}\n          style={{\n            maxWidth: Math.random() * (100 - 40) + 40 + \"%\",\n          }}\n          className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-neutral-100 dark:bg-black w-full h-4\"\n        ></motion.div>\n      ))}\n    </motion.div>\n  );\n};\nconst SkeletonThree = () => {\n  const variants = {\n    initial: {\n      backgroundPosition: \"0 50%\",\n    },\n    animate: {\n      backgroundPosition: [\"0, 50%\", \"100% 50%\", \"0 50%\"],\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={variants}\n      transition={{\n        duration: 5,\n        repeat: Infinity,\n        repeatType: \"reverse\",\n      }}\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] rounded-lg bg-dot-black/[0.2] flex-col space-y-2\"\n      style={{\n        background:\n          \"linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)\",\n        backgroundSize: \"400% 400%\",\n      }}\n    >\n      <motion.div className=\"h-full w-full rounded-lg\"></motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFour = () => {\n  const first = {\n    initial: {\n      x: 20,\n      rotate: -5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  const second = {\n    initial: {\n      x: -20,\n      rotate: 5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-row space-x-2\"\n    >\n      <motion.div\n        variants={first}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Just code in Vanilla Javascript\n        </p>\n        <p className=\"border border-red-500 bg-red-100 dark:bg-red-900/20 text-red-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Delusional\n        </p>\n      </motion.div>\n      <motion.div className=\"h-full relative z-20 w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\">\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Tailwind CSS is cool, you know\n        </p>\n        <p className=\"border border-green-500 bg-green-100 dark:bg-green-900/20 text-green-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Sensible\n        </p>\n      </motion.div>\n      <motion.div\n        variants={second}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          I love angular, RSC, and Redux.\n        </p>\n        <p className=\"border border-orange-500 bg-orange-100 dark:bg-orange-900/20 text-orange-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Helpless\n        </p>\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFive = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n \n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-2xl border border-neutral-100 dark:border-white/[0.2] p-2  items-start space-x-2 bg-white dark:bg-black\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"text-xs text-neutral-500\">\n          There are a lot of cool framerworks out there like React, Angular,\n          Vue, Svelte that can make your life ....\n        </p>\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center justify-end space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <p className=\"text-xs text-neutral-500\">Use PHP.</p>\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n    </motion.div>\n  );\n};\nconst items = [\n  {\n    title: \"AI Content Generation\",\n    description: (\n      <span className=\"text-sm\">\n        Experience the power of AI in generating unique content.\n      </span>\n    ),\n    header: <SkeletonOne />,\n    className: \"md:col-span-1\",\n    icon: <IconClipboardCopy className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Automated Proofreading\",\n    description: (\n      <span className=\"text-sm\">\n        Let AI handle the proofreading of your documents.\n      </span>\n    ),\n    header: <SkeletonTwo />,\n    className: \"md:col-span-1\",\n    icon: <IconFileBroken className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Contextual Suggestions\",\n    description: (\n      <span className=\"text-sm\">\n        Get AI-powered suggestions based on your writing context.\n      </span>\n    ),\n    header: <SkeletonThree />,\n    className: \"md:col-span-1\",\n    icon: <IconSignature className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Sentiment Analysis\",\n    description: (\n      <span className=\"text-sm\">\n        Understand the sentiment of your text with AI analysis.\n      </span>\n    ),\n    header: <SkeletonFour />,\n    className: \"md:col-span-2\",\n    icon: <IconTableColumn className=\"h-4 w-4 text-neutral-500\" />,\n  },\n \n  {\n    title: \"Text Summarization\",\n    description: (\n      <span className=\"text-sm\">\n        Summarize your lengthy documents with AI technology.\n      </span>\n    ),\n    header: <SkeletonFive />,\n    className: \"md:col-span-1\",\n    icon: <IconBoxAlignRightFilled className=\"h-4 w-4 text-neutral-500\" />,\n  },\n];"
  },
  {
    "component": "Bento Grid",
    "section": "Usage",
    "prompt": "Build a three-column dashboard layout using `<BentoGrid>` with `<BentoGridItem>` children; include the import and basic JSX structure.",
    "code": "import { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → BreadCrumb Active Item",
    "prompt": "Render a breadcrumb where the last item is shown as active (non-clickable); include import and the JSX for active link styling.",
    "code": "\"use client\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\nimport { useSearchParams } from \"next/navigation\";\n \nconst Pages = [\n  {\n    title: \"Home\",\n    path: \"/\",\n  },\n  {\n    title: \"Components\",\n    path: \"/docs/components\",\n  },\n  {\n    title: \"Breadcrumb\",\n    path: \"/docs/components/breadcrumb\",\n  },\n];\n \nconst BreadCrumbActiveItem = () => {\n  const searchParams = useSearchParams();\n  const path = searchParams?.get(\"path\");\n  return (\n    <Breadcrumb\n      orientation=\"horizontal\"\n      variant={\"ghost\"}\n      className=\"gap-1 bg-background rounded-lg p-2\"\n    >\n      {Pages.map((page, index) => {\n        const isActive = path === page.path;\n        return (\n          <div key={`${page.title}-path`} className=\"flex items-center gap-1\">\n            <BreadcrumbItem\n              isActive={isActive}\n              index={index}\n              className=\"h-8 px-2 \"\n              activeVariant={{\n                variant: \"default\",\n              }}\n            >\n              <Link scroll={false} href={`?path=${page.path}`}>\n                {page.title}\n              </Link>\n            </BreadcrumbItem>\n            {index !== Pages.length - 1 && <BreadcrumbSeparator />}\n          </div>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n \nexport BreadCrumbActiveItem;"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Collapsed",
    "prompt": "When only two items fit, collapse intermediate links into “…”—render a collapsed Breadcrumb with import and JSX.",
    "code": "import {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\n \nexport function BreadcrumbCollapsed() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink asChild>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={2}>\n          <BreadcrumbEllipsis index={2} />\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={3}>\n          <BreadcrumbLink asChild>\n            <Link href=\"/docs/components\">Components</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={4}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n\nimport { BreadcrumbEllipsis } from \"@camped-ui/breadcrumb\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Custom separator",
    "prompt": "Render a `<Breadcrumb>` that uses “>” as a custom separator between items; include import and `<Breadcrumb separator=“>”>` JSX.",
    "code": "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport { SlashIcon } from \"@radix-ui/react-icons\";\n \nexport function BreadcrumbWithCustomSeparator() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={2}>\n          <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n\nimport { SlashIcon } from \"@radix-ui/react-icons\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <SlashIcon />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Dropdown",
    "prompt": "Show a breadcrumb that collapses middle items into a dropdown when space is tight; include import and full JSX.",
    "code": "import { ChevronDownIcon, SlashIcon } from \"@radix-ui/react-icons\"\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n \nexport function BreadcrumbWithDropdown() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={2}>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              Components\n              <ChevronDownIcon className=\"h-4 w-4\" />\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \n...\n \n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Link component",
    "prompt": "Use a React Router `<Link>` inside each `<BreadcrumbItem>` instead of a standard anchor; include import and JSX showing `<Breadcrumb asChild><Link …>`.",
    "code": "import Link from \"next/link\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\n \nexport function BreadcrumbWithCustomSeparator() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={2}>\n          <BreadcrumbLink>\n            <Link href=\"/components\">Components</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n\nimport { Link } from \"next/link\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Orientation",
    "prompt": "Implement a vertical `Breadcrumb` in a sidebar listing, instead of the default horizontal—include import and `orientation=\"vertical\"` example.",
    "code": "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\n \nconst Pages = [\n  {\n    title: \"Home\",\n    path: \"/\",\n  },\n  {\n    title: \"Components\",\n    path: \"/docs/components\",\n  },\n  {\n    title: \"Breadcrumb\",\n    path: \"#\",\n  },\n];\n \nconst BreadcrumbOrientation = () => {\n  return (\n    <Breadcrumb\n      orientation=\"vertical\"\n      variant={\"ghost\"}\n      className=\"gap-1 bg-background rounded-lg p-2\"\n    >\n      {Pages.map((page, index) => {\n        return (\n          <div\n            key={`${page.title}-path`}\n            className=\"flex flex-col items-center gap-1\"\n          >\n            <BreadcrumbItem index={index} className=\"h-8 px-2 \">\n              <Link scroll={false} href={`#`}>\n                {page.title}\n              </Link>\n            </BreadcrumbItem>\n            {index !== Pages.length - 1 && <BreadcrumbSeparator />}\n          </div>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n \nexport BreadcrumbOrientation;"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Responsive",
    "prompt": "Build a breadcrumb that automatically truncates on smaller screens; include import and `Breadcrumb` JSX with responsive behavior.",
    "code": "\"use client\";\n \nimport * as React from \"react\";\nimport Link from \"next/link\";\n \nimport { useMediaQuery } from \"@/hooks/use-media-query\";\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport { Button } from \"@camped-ui/button\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@camped-ui/drawer\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n \nconst items = [\n  { href: \"#\", label: \"Home\" },\n  { href: \"#\", label: \"Documentation\" },\n  { href: \"#\", label: \"Building Your Application\" },\n  { href: \"#\", label: \"Data Fetching\" },\n  { label: \"Caching and Revalidating\" },\n];\n \nconst ITEMS_TO_DISPLAY = 3;\n \nexport function BreadcrumbResponsive() {\n  const [open, setOpen] = React.useState(false);\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n \n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href={items[0].href}>{items[0].label}</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        {items.length > ITEMS_TO_DISPLAY ? (\n          <>\n            <BreadcrumbItem index={2}>\n              {isDesktop ? (\n                <DropdownMenu open={open} onOpenChange={setOpen}>\n                  <DropdownMenuTrigger\n                    className=\"flex items-center gap-1\"\n                    aria-label=\"Toggle menu\"\n                  >\n                    <BreadcrumbEllipsis className=\"h-4 w-4\" index={2} />\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    {items.slice(1, -2).map((item, index) => (\n                      <DropdownMenuItem key={index}>\n                        <Link href={item.href ? item.href : \"#\"}>\n                          {item.label}\n                        </Link>\n                      </DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Drawer open={open} onOpenChange={setOpen}>\n                  <DrawerTrigger aria-label=\"Toggle Menu\">\n                    <BreadcrumbEllipsis className=\"h-4 w-4\" index={2} />\n                  </DrawerTrigger>\n                  <DrawerContent>\n                    <DrawerHeader className=\"text-left\">\n                      <DrawerTitle>Navigate to</DrawerTitle>\n                      <DrawerDescription>\n                        Select a page to navigate to.\n                      </DrawerDescription>\n                    </DrawerHeader>\n                    <div className=\"grid gap-1 px-4\">\n                      {items.slice(1, -2).map((item, index) => (\n                        <Link\n                          key={index}\n                          href={item.href ? item.href : \"#\"}\n                          className=\"py-1 text-sm\"\n                        >\n                          {item.label}\n                        </Link>\n                      ))}\n                    </div>\n                    <DrawerFooter className=\"pt-4\">\n                      <DrawerClose asChild>\n                        <Button variant=\"outline\">Close</Button>\n                      </DrawerClose>\n                    </DrawerFooter>\n                  </DrawerContent>\n                </Drawer>\n              )}\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n          </>\n        ) : null}\n        {items.slice(-ITEMS_TO_DISPLAY + 1).map((item, index) => (\n          <BreadcrumbItem index={index}>\n            {item.href ? (\n              <>\n                <BreadcrumbLink\n                  asChild\n                  className=\"max-w-20 truncate md:max-w-none\"\n                >\n                  <Link href={item.href}>{item.label}</Link>\n                </BreadcrumbLink>\n                <BreadcrumbSeparator />\n              </>\n            ) : (\n              <BreadcrumbPage className=\"max-w-20 truncate md:max-w-none\">\n                {item.label}\n              </BreadcrumbPage>\n            )}\n          </BreadcrumbItem>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → Variants",
    "prompt": "Show how to render Breadcrumb links in uppercase variant for a category menu; include import and appropriate JSX.",
    "code": "\"use client\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\n \nconst OPTIONS = [\"ghost\", \"outline\", \"link\", \"default\", \"destructive\"];\n \nconst BreadCrumbVariantPicker = ({\n  variant,\n  setVariant,\n}: {\n  variant: string;\n  setVariant: (variant: string) => void;\n}) => {\n  return (\n    <div className=\"absolute right-2 top-2\">\n      <Select defaultValue=\"ghost\" value={variant} onValueChange={setVariant}>\n        <SelectTrigger className=\"px-2 h-8 bg-background text-xs w-40\">\n          <SelectValue>\n            <span className=\"text-muted-foreground font-bold\">Variant : </span>\n            <span>{variant}</span>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent align=\"end\">\n          {OPTIONS.map((opt, index) => (\n            <SelectItem key={`${opt}-${index}`} value={opt} className=\"text-sm\">\n              {opt}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};\n \nconst BreadCrumbTest = () => {\n  const [variant, setVariant] = useState(\"ghost\");\n  return (\n    <>\n      <Breadcrumb\n        orientation=\"horizontal\"\n        variant={variant as any}\n        className=\"gap-1 bg-background rounded-lg p-2\"\n      >\n        <BreadcrumbItem className=\"px-2 h-7\" index={0}>\n          <Link href=\"/\">Home</Link>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem className=\"px-2 h-7\" index={1}>\n          Settings\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem className=\"px-2 h-7\" index={2}>\n          Account\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <BreadCrumbVariantPicker variant={variant} setVariant={setVariant} />\n    </>\n  );\n};\n \nexport BreadCrumbTest;"
  },
  {
    "component": "Breadcrumb",
    "section": "Usage",
    "prompt": "On a product detail page, display a breadcrumb like Home / Shop / Sneakers; include the import and JSX for `<Breadcrumb>` with three items.",
    "code": "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\"\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>"
  },
  {
    "component": "Button",
    "section": "Examples → As Child",
    "prompt": "In a form where you need a as child Button, use CampEdUI’s Button component with the 'as child' variant. Include the import and the JSX markup for a standalone as child Button.",
    "code": "import Link from \"next/link\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonAsChild() {\n  return (\n    <Button asChild>\n      <Link href=\"/login\">Login</Link>\n    </Button>\n  )\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Destructive",
    "prompt": "In a form where you need a destructive Button, use CampEdUI’s Button component with the 'destructive' variant. Include the import and the JSX markup for a standalone destructive Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonDestructive() {\n  return <Button variant=\"destructive\">Destructive</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Ghost",
    "prompt": "In a form where you need a ghost Button, use CampEdUI’s Button component with the 'ghost' variant. Include the import and the JSX markup for a standalone ghost Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonGhost() {\n  return <Button variant=\"ghost\">Ghost</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Icon",
    "prompt": "In a form where you need a icon Button, use CampEdUI’s Button component with the 'icon' variant. Include the import and the JSX markup for a standalone icon Button.",
    "code": "import { ChevronRight } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonIcon() {\n  return (\n    <Button variant=\"outline\" size=\"icon\">\n      <ChevronRight className=\"h-4 w-4\" />\n    </Button>\n  )\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Link",
    "prompt": "In a form where you need a link Button, use CampEdUI’s Button component with the 'link' variant. Include the import and the JSX markup for a standalone link Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonLink() {\n  return <Button variant=\"link\">Link</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Loading",
    "prompt": "In a form where you need a loading Button, use CampEdUI’s Button component with the 'loading' variant. Include the import and the JSX markup for a standalone loading Button.",
    "code": "import { Loader2 } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonLoading() {\n  return (\n    <Button disabled>\n      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      Please wait\n    </Button>\n  )\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Outline",
    "prompt": "In a form where you need a outline Button, use CampEdUI’s Button component with the 'outline' variant. Include the import and the JSX markup for a standalone outline Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonOutline() {\n  return <Button variant=\"outline\">Outline</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Primary",
    "prompt": "In a form where you need a primary Button, use CampEdUI’s Button component with the 'primary' variant. Include the import and the JSX markup for a standalone primary Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonDemo() {\n  return <Button>Button</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Secondary",
    "prompt": "In a form where you need a secondary Button, use CampEdUI’s Button component with the 'secondary' variant. Include the import and the JSX markup for a standalone secondary Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonSecondary() {\n  return <Button variant=\"secondary\">Secondary</Button>\n}"
  },
  {
    "component": "Button",
    "section": "Examples → With Icon",
    "prompt": "In a form where you need a with icon Button, use CampEdUI’s Button component with the 'with icon' variant. Include the import and the JSX markup for a standalone with icon Button.",
    "code": "import { Mail } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonWithIcon() {\n  return (\n    <Button>\n      <Mail className=\"mr-2 h-4 w-4\" /> Login with Email\n    </Button>\n  )\n}"
  },
  {
    "component": "Button",
    "section": "Link",
    "prompt": "Show how to create a link-styled Button that navigates to “/login” using Next.js `<Link>`—include import and `<Button asChild><Link href=\"/login\">Login</Link></Button>`.",
    "code": "import { buttonVariants } from \"@camped-ui/button\";\n\n<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>\n\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>"
  },
  {
    "component": "Button",
    "section": "Usage",
    "prompt": "On a signup form, render a primary Button labeled “Sign Up” that spans the full width of the form; include import and `<Button variant=\"primary\" fullWidth>` JSX.",
    "code": "import { Button } from \"@camped-ui/button\";"
  },
  {
    "component": "Calendar",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Calendar, use CampEdUI’s Calendar component with the 'form' variant. Include the import and the JSX markup for a standalone form Calendar.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst FormSchema = z.object({\n  dob: z.date({\n    required_error: \"A date of birth is required.\",\n  }),\n})\n \nexport function CalendarForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Calendar",
    "section": "Usage",
    "prompt": "In your React app, import the Calendar component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Calendar } from \"@camped-ui/calendar\";\n\nconst [date, setDate] = React.useState<Date | undefined>(new Date());\n \nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n);"
  },
  {
    "component": "Card",
    "section": "Usage",
    "prompt": "In your React app, import the Card component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@camped-ui/card\";\n\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>"
  },
  {
    "component": "Carousel",
    "section": "Examples → Indicator",
    "prompt": "In a form where you need a indicator Carousel, use CampEdUI’s Carousel component with the 'indicator' variant. Include the import and the JSX markup for a standalone indicator Carousel.",
    "code": "import {\n  Carousel,\n  CarouselIndicator,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  CarouselThumbsContainer,\n  CarouselItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselIndicatorExample = () => {\n  return (\n    <Carousel>\n      <CarouselNext />\n      <CarouselPrevious />\n      <div className=\"relative \">\n        <CarouselContent className=\"h-60 p-1 pl-2\">\n          {Array.from({ length: 5 }).map((_, index) => (\n            <CarouselItem key={index} className=\"bg-transparent\">\n              <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n                Slide {index + 1}\n              </div>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <div className=\"absolute bottom-2 left-1/2 -translate-x-1/2\">\n          <CarouselThumbsContainer className=\"gap-x-1 \">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <CarouselIndicator key={index} index={index} />\n            ))}\n          </CarouselThumbsContainer>\n        </div>\n      </div>\n    </Carousel>\n  );\n};\n \nexport CarouselIndicatorExample;"
  },
  {
    "component": "Carousel",
    "section": "Examples → Orientation",
    "prompt": "In a form where you need a orientation Carousel, use CampEdUI’s Carousel component with the 'orientation' variant. Include the import and the JSX markup for a standalone orientation Carousel.",
    "code": "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselOrientation() {\n  return (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      orientation=\"vertical\"\n      className=\"w-full max-w-xs\"\n    >\n      <CarouselContent className=\"-mt-1 h-[200px]\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pt-1 md:basis-1/2\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}\n\n<Carousel orientation=\"vertical | horizontal\">\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
  },
  {
    "component": "Carousel",
    "section": "Examples → Orientation with Container",
    "prompt": "In a form where you need a orientation with container Carousel, use CampEdUI’s Carousel component with the 'orientation with container' variant. Include the import and the JSX markup for a standalone orientation with container Carousel.",
    "code": "import {\n  Carousel,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  CarouselItem,\n  CarouselThumbsContainer,\n  SliderThumbItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselOrientationWithContainer = () => {\n  return (\n    <Carousel>\n      <CarouselNext className=\"top-1/3 -translate-y-1/3\" />\n      <CarouselPrevious className=\"top-1/3 -translate-y-1/3\" />\n      <CarouselContent className=\"h-60 p-1\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"bg-transparent  \">\n            <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n              Slide {index + 1}\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselThumbsContainer>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <SliderThumbItem key={index} index={index} className=\"bg-transparent\">\n            <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n              Slide {index + 1}\n            </div>\n          </SliderThumbItem>\n        ))}\n      </CarouselThumbsContainer>\n    </Carousel>\n  );\n};\n \nexport CarouselOrientationWithContainer;"
  },
  {
    "component": "Carousel",
    "section": "Examples → Sizes",
    "prompt": "In a form where you need a sizes Carousel, use CampEdUI’s Carousel component with the 'sizes' variant. Include the import and the JSX markup for a standalone sizes Carousel.",
    "code": "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselSize() {\n  return (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      className=\"w-full max-w-sm\"\n    >\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}\n\n// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n\n// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
  },
  {
    "component": "Carousel",
    "section": "Examples → Slider",
    "prompt": "In a form where you need a slider Carousel, use CampEdUI’s Carousel component with the 'slider' variant. Include the import and the JSX markup for a standalone slider Carousel.",
    "code": "import {\n  Carousel,\n  CarouselContent,\n  CarouselThumbsContainer,\n  CarouselItem,\n  SliderThumbItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselSlider = () => {\n  return (\n    <Carousel\n      orientation=\"vertical\"\n      className=\"flex items-center gap-2 w-full max-w-sm\"\n    >\n      <div className=\"relative basis-3/4 py-4 \">\n        <CarouselContent className=\"h-60 gap-2 -mt-0\">\n          {Array.from({ length: 10 }).map((_, index) => (\n            <CarouselItem\n              key={index}\n              className=\"border border-muted flex items-center justify-center h-52 rounded-md\"\n            >\n              Slide {index + 1}\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n      </div>\n      <CarouselThumbsContainer className=\"h-60 basis-1/4\">\n        {Array.from({ length: 10 }).map((_, index) => (\n          <SliderThumbItem\n            key={index}\n            index={index}\n            className=\"rounded-md bg-transparent\"\n          >\n            <span className=\"border border-muted flex items-center justify-center h-full w-full rounded-md cursor-pointer bg-background\">\n              Slide {index + 1}\n            </span>\n          </SliderThumbItem>\n        ))}\n      </CarouselThumbsContainer>\n    </Carousel>\n  );\n};\n \nexport CarouselSlider;"
  },
  {
    "component": "Carousel",
    "section": "Examples → Spacing",
    "prompt": "In a form where you need a spacing Carousel, use CampEdUI’s Carousel component with the 'spacing' variant. Include the import and the JSX markup for a standalone spacing Carousel.",
    "code": "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselSpacing() {\n  return (\n    <Carousel className=\"w-full max-w-sm\">\n      <CarouselContent className=\"-ml-1\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pl-1 md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-2xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}\n\n<Carousel>\n  <CarouselContent className=\"-ml-4\">\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n\n<Carousel>\n  <CarouselContent className=\"-ml-2 md:-ml-4\">\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
  },
  {
    "component": "Carousel",
    "section": "Usage",
    "prompt": "In your React app, import the Carousel component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\n\n<Carousel>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n  <CarouselPrevious />\n  <CarouselNext />\n</Carousel>"
  },
  {
    "component": "Checkbox",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Checkbox, use CampEdUI’s Checkbox component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Checkbox.",
    "code": "import { Checkbox } from \"@camped-ui/checkbox\"\n \nexport function CheckboxDisabled() {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox id=\"terms2\" disabled />\n      <label\n        htmlFor=\"terms2\"\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n      >\n        Accept terms and conditions\n      </label>\n    </div>\n  )\n}"
  },
  {
    "component": "Checkbox",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Checkbox, use CampEdUI’s Checkbox component with the 'form' variant. Include the import and the JSX markup for a standalone form Checkbox.",
    "code": "\"use client\"\n \nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Checkbox } from \"@camped-ui/checkbox\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@camped-ui/form\"\n \nconst FormSchema = z.object({\n  mobile: z.boolean().default(false).optional(),\n})\n \nexport function CheckboxReactHookFormSingle() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      mobile: true,\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"mobile\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel>\n                  Use different settings for my mobile devices\n                </FormLabel>\n                <FormDescription>\n                  You can manage your mobile notifications in the{\" \"}\n                  <Link href=\"/examples/forms\">mobile settings</Link> page.\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n\n\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Checkbox } from \"@camped-ui/checkbox\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\n \nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const\n \nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n})\n \nexport function CheckboxReactHookFormMultiple() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"items\"\n          render={() => (\n            <FormItem>\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-base\">Sidebar</FormLabel>\n                <FormDescription>\n                  Select the items you want to display in the sidebar.\n                </FormDescription>\n              </div>\n              {items.map((item) => (\n                <FormField\n                  key={item.id}\n                  control={form.control}\n                  name=\"items\"\n                  render={({ field }) => {\n                    return (\n                      <FormItem\n                        key={item.id}\n                        className=\"flex flex-row items-start space-x-3 space-y-0\"\n                      >\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value?.includes(item.id)}\n                            onCheckedChange={(checked) => {\n                              return checked\n                                ? field.onChange([...field.value, item.id])\n                                : field.onChange(\n                                    field.value?.filter(\n                                      (value) => value !== item.id\n                                    )\n                                  )\n                            }}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"font-normal\">\n                          {item.label}\n                        </FormLabel>\n                      </FormItem>\n                    )\n                  }}\n                />\n              ))}\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Checkbox",
    "section": "Examples → With text",
    "prompt": "In a form where you need a with text Checkbox, use CampEdUI’s Checkbox component with the 'with text' variant. Include the import and the JSX markup for a standalone with text Checkbox.",
    "code": "\"use client\"\n \nimport { Checkbox } from \"@camped-ui/checkbox\"\n \nexport function CheckboxWithText() {\n  return (\n    <div className=\"items-top flex space-x-2\">\n      <Checkbox id=\"terms1\" />\n      <div className=\"grid gap-1.5 leading-none\">\n        <label\n          htmlFor=\"terms1\"\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n        >\n          Accept terms and conditions\n        </label>\n        <p className=\"text-sm text-muted-foreground\">\n          You agree to our Terms of Service and Privacy Policy.\n        </p>\n      </div>\n    </div>\n  )\n}"
  },
  {
    "component": "Checkbox",
    "section": "Usage",
    "prompt": "In your React app, import the Checkbox component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Checkbox } from \"@camped-ui/checkbox\";\n\n<Checkbox />"
  },
  {
    "component": "Collapsible",
    "section": "Usage",
    "prompt": "In your React app, import the Collapsible component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@camped-ui/collapsible\";\n\n<Collapsible>\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n  <CollapsibleContent>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </CollapsibleContent>\n</Collapsible>"
  },
  {
    "component": "Combobox",
    "section": "Examples → Combobox",
    "prompt": "In a form where you need a combobox Combobox, use CampEdUI’s Combobox component with the 'combobox' variant. Include the import and the JSX markup for a standalone combobox Combobox.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue)\n                  setOpen(false)\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}"
  },
  {
    "component": "Combobox",
    "section": "Examples → Dropdown menu",
    "prompt": "In a form where you need a dropdown menu Combobox, use CampEdUI’s Combobox component with the 'dropdown menu' variant. Include the import and the JSX markup for a standalone dropdown menu Combobox.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { Calendar, MoreHorizontal, Tags, Trash, User } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@camped-ui/command\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \nconst labels = [\n  \"feature\",\n  \"bug\",\n  \"enhancement\",\n  \"documentation\",\n  \"design\",\n  \"question\",\n  \"maintenance\",\n]\n \nexport function ComboboxDropdownMenu() {\n  const [label, setLabel] = React.useState(\"feature\")\n  const [open, setOpen] = React.useState(false)\n \n  return (\n    <div className=\"flex w-full flex-col items-start justify-between rounded-md border px-4 py-3 sm:flex-row sm:items-center\">\n      <p className=\"text-sm font-medium leading-none\">\n        <span className=\"mr-2 rounded-lg bg-primary px-2 py-1 text-xs text-primary-foreground\">\n          {label}\n        </span>\n        <span className=\"text-muted-foreground\">Create a new project</span>\n      </p>\n      <DropdownMenu open={open} onOpenChange={setOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\">\n            <MoreHorizontal />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              Assign to...\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Set due date...\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuSub>\n              <DropdownMenuSubTrigger>\n                <Tags className=\"mr-2 h-4 w-4\" />\n                Apply label\n              </DropdownMenuSubTrigger>\n              <DropdownMenuSubContent className=\"p-0\">\n                <Command>\n                  <CommandInput\n                    placeholder=\"Filter label...\"\n                    autoFocus={true}\n                  />\n                  <CommandList>\n                    <CommandEmpty>No label found.</CommandEmpty>\n                    <CommandGroup>\n                      {labels.map((label) => (\n                        <CommandItem\n                          key={label}\n                          value={label}\n                          onSelect={(value) => {\n                            setLabel(value)\n                            setOpen(false)\n                          }}\n                        >\n                          {label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </DropdownMenuSubContent>\n            </DropdownMenuSub>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-600\">\n              <Trash className=\"mr-2 h-4 w-4\" />\n              Delete\n              <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}"
  },
  {
    "component": "Combobox",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Combobox, use CampEdUI’s Combobox component with the 'form' variant. Include the import and the JSX markup for a standalone form Combobox.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst languages = [\n  { label: \"English\", value: \"en\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Portuguese\", value: \"pt\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Korean\", value: \"ko\" },\n  { label: \"Chinese\", value: \"zh\" },\n] as const\n \nconst FormSchema = z.object({\n  language: z.string({\n    required_error: \"Please select a language.\",\n  }),\n})\n \nexport function ComboboxForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"language\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Language</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      className={cn(\n                        \"w-[200px] justify-between\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value\n                        ? languages.find(\n                            (language) => language.value === field.value\n                          )?.label\n                        : \"Select language\"}\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-[200px] p-0\">\n                  <Command>\n                    <CommandInput placeholder=\"Search language...\" />\n                    <CommandEmpty>No language found.</CommandEmpty>\n                    <CommandGroup>\n                      {languages.map((language) => (\n                        <CommandItem\n                          value={language.label}\n                          key={language.value}\n                          onSelect={() => {\n                            form.setValue(\"language\", language.value)\n                          }}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              language.value === field.value\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                            )}\n                          />\n                          {language.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                This is the language that will be used in the dashboard.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Combobox",
    "section": "Examples → Popover",
    "prompt": "In a form where you need a popover Combobox, use CampEdUI’s Combobox component with the 'popover' variant. Include the import and the JSX markup for a standalone popover Combobox.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport {\n  ArrowUpCircle,\n  CheckCircle2,\n  Circle,\n  HelpCircle,\n  LucideIcon,\n  XCircle,\n} from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@camped-ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \ntype Status = {\n  value: string\n  label: string\n  icon: LucideIcon\n}\n \nconst statuses: Status[] = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    icon: HelpCircle,\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    icon: Circle,\n  },\n  {\n    value: \"in progress\",\n    label: \"In Progress\",\n    icon: ArrowUpCircle,\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    icon: CheckCircle2,\n  },\n  {\n    value: \"canceled\",\n    label: \"Canceled\",\n    icon: XCircle,\n  },\n]\n \nexport function ComboboxPopover() {\n  const [open, setOpen] = React.useState(false)\n  const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(\n    null\n  )\n \n  return (\n    <div className=\"flex items-center space-x-4\">\n      <p className=\"text-sm text-muted-foreground\">Status</p>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-[150px] justify-start\"\n          >\n            {selectedStatus ? (\n              <>\n                <selectedStatus.icon className=\"mr-2 h-4 w-4 shrink-0\" />\n                {selectedStatus.label}\n              </>\n            ) : (\n              <>+ Set status</>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n          <Command>\n            <CommandInput placeholder=\"Change status...\" />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup>\n                {statuses.map((status) => (\n                  <CommandItem\n                    key={status.value}\n                    value={status.value}\n                    onSelect={(value) => {\n                      setSelectedStatus(\n                        statuses.find((priority) => priority.value === value) ||\n                          null\n                      )\n                      setOpen(false)\n                    }}\n                  >\n                    <status.icon\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        status.value === selectedStatus?.value\n                          ? \"opacity-100\"\n                          : \"opacity-40\"\n                      )}\n                    />\n                    <span>{status.label}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}"
  },
  {
    "component": "Combobox",
    "section": "Usage",
    "prompt": "In your React app, import the Combobox component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "\"use client\";\n \nimport * as React from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n \nimport { cn } from \"@camped-ui/lib\";\nimport { Button } from \"@camped-ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n];\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue);\n                  setOpen(false);\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}"
  },
  {
    "component": "Command",
    "section": "Examples → Dialog",
    "prompt": "In a form where you need a dialog Command, use CampEdUI’s Command component with the 'dialog' variant. Include the import and the JSX markup for a standalone dialog Command.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n \nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@camped-ui/command\"\n \nexport function CommandDialogDemo() {\n  const [open, setOpen] = React.useState(false)\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n \n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n \n  return (\n    <>\n      <p className=\"text-sm text-muted-foreground\">\n        Press{\" \"}\n        <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n          <span className=\"text-xs\">⌘</span>J\n        </kbd>\n      </p>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile className=\"mr-2 h-4 w-4\" />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem>\n              <Calculator className=\"mr-2 h-4 w-4\" />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n              <CommandShortcut>⌘P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              <span>Billing</span>\n              <CommandShortcut>⌘B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n              <CommandShortcut>⌘S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}\n\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false);\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n \n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  );\n}"
  },
  {
    "component": "Command",
    "section": "Usage",
    "prompt": "In your React app, import the Command component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@camped-ui/command\";\n\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>"
  },
  {
    "component": "Context Menu",
    "section": "Usage",
    "prompt": "In your React app, import the Context Menu component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@camped-ui/context-menu\";\n\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>"
  },
  {
    "component": "Data Table",
    "section": "Reusable Components → Column header",
    "prompt": "Create a Data Table example for the 'Column header' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\nimport { cn } from \"@camped-ui/lib\";\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  CaretSortIcon,\n  EyeNoneIcon,\n} from \"@radix-ui/react-icons\";\nimport { Column } from \"@tanstack/react-table\";\n \ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n \nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n \n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUpIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDownIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeNoneIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n  },\n]"
  },
  {
    "component": "Data Table",
    "section": "Reusable Components → Column toggle",
    "prompt": "Create a Data Table example for the 'Column toggle' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@camped-ui/dropdown-menu\";\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\nimport { MixerHorizontalIcon } from \"@radix-ui/react-icons\";\nimport { Table } from \"@tanstack/react-table\";\n \ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n \nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\n<DataTableViewOptions table={table} />"
  },
  {
    "component": "Data Table",
    "section": "Reusable Components → Pagination",
    "prompt": "Create a Data Table example for the 'Pagination' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon,\n} from \"@radix-ui/react-icons\";\nimport { Table } from \"@tanstack/react-table\";\n \ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n \nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <DoubleArrowLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRightIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <DoubleArrowRightIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n<DataTablePagination table={table} />"
  },
  {
    "component": "Date Picker",
    "section": "Examples → Date Picker",
    "prompt": "In a form where you need a date picker Date Picker, use CampEdUI’s Date Picker component with the 'date picker' variant. Include the import and the JSX markup for a standalone date picker Date Picker.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}"
  },
  {
    "component": "Date Picker",
    "section": "Examples → Date Range Picker",
    "prompt": "In a form where you need a date range picker Date Picker, use CampEdUI’s Date Picker component with the 'date range picker' variant. Include the import and the JSX markup for a standalone date range picker Date Picker.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { addDays, format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\nimport { DateRange } from \"react-day-picker\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nexport function DatePickerWithRange({\n  className,\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const [date, setDate] = React.useState<DateRange | undefined>({\n    from: new Date(2022, 0, 20),\n    to: addDays(new Date(2022, 0, 20), 20),\n  })\n \n  return (\n    <div className={cn(\"grid gap-2\", className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant={\"outline\"}\n            className={cn(\n              \"w-[300px] justify-start text-left font-normal\",\n              !date && \"text-muted-foreground\"\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, \"LLL dd, y\")} -{\" \"}\n                  {format(date.to, \"LLL dd, y\")}\n                </>\n              ) : (\n                format(date.from, \"LLL dd, y\")\n              )\n            ) : (\n              <span>Pick a date</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={setDate}\n            numberOfMonths={2}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}"
  },
  {
    "component": "Date Picker",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Date Picker, use CampEdUI’s Date Picker component with the 'form' variant. Include the import and the JSX markup for a standalone form Date Picker.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst FormSchema = z.object({\n  dob: z.date({\n    required_error: \"A date of birth is required.\",\n  }),\n})\n \nexport function DatePickerForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Date Picker",
    "section": "Examples → With Presets",
    "prompt": "In a form where you need a with presets Date Picker, use CampEdUI’s Date Picker component with the 'with presets' variant. Include the import and the JSX markup for a standalone with presets Date Picker.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { addDays, format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nexport function DatePickerWithPresets() {\n  const [date, setDate] = React.useState<Date>()\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"flex w-auto flex-col space-y-2 p-2\">\n        <Select\n          onValueChange={(value) =>\n            setDate(addDays(new Date(), parseInt(value)))\n          }\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent position=\"popper\">\n            <SelectItem value=\"0\">Today</SelectItem>\n            <SelectItem value=\"1\">Tomorrow</SelectItem>\n            <SelectItem value=\"3\">In 3 days</SelectItem>\n            <SelectItem value=\"7\">In a week</SelectItem>\n          </SelectContent>\n        </Select>\n        <div className=\"rounded-md border\">\n          <Calendar mode=\"single\" selected={date} onSelect={setDate} />\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}"
  },
  {
    "component": "Date Picker",
    "section": "Usage",
    "prompt": "In your React app, import the Date Picker component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "\"use client\";\n \nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\n \nimport { cn } from \"@camped-ui/lib\";\nimport { Button } from \"@camped-ui/button\";\nimport { Calendar } from \"@camped-ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";\n \nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>();\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}"
  },
  {
    "component": "Dialog",
    "section": "Examples → Custom close button",
    "prompt": "In a form where you need a custom close button Dialog, use CampEdUI’s Dialog component with the 'custom close button' variant. Include the import and the JSX markup for a standalone custom close button Dialog.",
    "code": "import { Copy } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@camped-ui/dialog\"\nimport { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function DialogCloseButton() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Share</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Share link</DialogTitle>\n          <DialogDescription>\n            Anyone who has this link will be able to view this.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"grid flex-1 gap-2\">\n            <Label htmlFor=\"link\" className=\"sr-only\">\n              Link\n            </Label>\n            <Input\n              id=\"link\"\n              defaultValue=\"https://ui.camped.com/docs/installation\"\n              readOnly\n            />\n          </div>\n          <Button type=\"submit\" size=\"sm\" className=\"px-3\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <DialogFooter className=\"sm:justify-start\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}"
  },
  {
    "component": "Dialog",
    "section": "Usage",
    "prompt": "In your React app, import the Dialog component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@camped-ui/dialog\";\n\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you sure absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>"
  },
  {
    "component": "Dropdown Menu",
    "section": "Examples → Checkboxes",
    "prompt": "In a form where you need a checkboxes Dropdown Menu, use CampEdUI’s Dropdown Menu component with the 'checkboxes' variant. Include the import and the JSX markup for a standalone checkboxes Dropdown Menu.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \ntype Checked = DropdownMenuCheckboxItemProps[\"checked\"]\n \nexport function DropdownMenuCheckboxes() {\n  const [showStatusBar, setShowStatusBar] = React.useState<Checked>(true)\n  const [showActivityBar, setShowActivityBar] = React.useState<Checked>(false)\n  const [showPanel, setShowPanel] = React.useState<Checked>(false)\n \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Appearance</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={showStatusBar}\n          onCheckedChange={setShowStatusBar}\n        >\n          Status Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showActivityBar}\n          onCheckedChange={setShowActivityBar}\n          disabled\n        >\n          Activity Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showPanel}\n          onCheckedChange={setShowPanel}\n        >\n          Panel\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}"
  },
  {
    "component": "Dropdown Menu",
    "section": "Examples → Radio Group",
    "prompt": "In a form where you need a radio group Dropdown Menu, use CampEdUI’s Dropdown Menu component with the 'radio group' variant. Include the import and the JSX markup for a standalone radio group Dropdown Menu.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \nexport function DropdownMenuRadioGroupDemo() {\n  const [position, setPosition] = React.useState(\"bottom\")\n \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n          <DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}"
  },
  {
    "component": "Dropdown Menu",
    "section": "Usage",
    "prompt": "In your React app, import the Dropdown Menu component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>"
  },
  {
    "component": "Form",
    "section": "Usage",
    "prompt": "In your React app, import the Form component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "\"use client\"\n \nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})\n\n\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n \n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}\n\n\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Input } from \"@camped-ui/input\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // ...\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Hover Card",
    "section": "Usage",
    "prompt": "In your React app, import the Hover Card component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@camped-ui/hover-card\";\n\n<HoverCard>\n  <HoverCardTrigger>Hover</HoverCardTrigger>\n  <HoverCardContent>\n    The React Framework – created and maintained by @vercel.\n  </HoverCardContent>\n</HoverCard>"
  },
  {
    "component": "Input",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Input, use CampEdUI’s Input component with the 'default' variant. Include the import and the JSX markup for a standalone default Input.",
    "code": "import { Input } from \"@camped-ui/input\"\n \nexport function InputDemo() {\n  return <Input type=\"email\" placeholder=\"Email\" />\n}"
  },
  {
    "component": "Input",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Input, use CampEdUI’s Input component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Input.",
    "code": "import { Input } from \"@camped-ui/input\"\n \nexport function InputDisabled() {\n  return <Input disabled type=\"email\" placeholder=\"Email\" />\n}"
  },
  {
    "component": "Input",
    "section": "Examples → File",
    "prompt": "In a form where you need a file Input, use CampEdUI’s Input component with the 'file' variant. Include the import and the JSX markup for a standalone file Input.",
    "code": "import { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function InputFile() {\n  return (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"picture\">Picture</Label>\n      <Input id=\"picture\" type=\"file\" />\n    </div>\n  )\n}"
  },
  {
    "component": "Input",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Input, use CampEdUI’s Input component with the 'form' variant. Include the import and the JSX markup for a standalone form Input.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Input } from \"@camped-ui/input\"\n \nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function InputForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Input",
    "section": "Examples → With Button",
    "prompt": "In a form where you need a with button Input, use CampEdUI’s Input component with the 'with button' variant. Include the import and the JSX markup for a standalone with button Input.",
    "code": "import { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\n \nexport function InputWithButton() {\n  return (\n    <div className=\"flex w-full max-w-sm items-center space-x-2\">\n      <Input type=\"email\" placeholder=\"Email\" />\n      <Button type=\"submit\">Subscribe</Button>\n    </div>\n  )\n}"
  },
  {
    "component": "Input",
    "section": "Examples → With Label",
    "prompt": "In a form where you need a with label Input, use CampEdUI’s Input component with the 'with label' variant. Include the import and the JSX markup for a standalone with label Input.",
    "code": "import { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function InputWithLabel() {\n  return (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"email\">Email</Label>\n      <Input type=\"email\" id=\"email\" placeholder=\"Email\" />\n    </div>\n  )\n}"
  },
  {
    "component": "Input",
    "section": "Usage",
    "prompt": "In your React app, import the Input component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Input } from \"@camped-ui/input\";\n\n<Input />"
  },
  {
    "component": "Input OTP",
    "section": "Examples → Controlled",
    "prompt": "In a form where you need a controlled Input OTP, use CampEdUI’s Input OTP component with the 'controlled' variant. Include the import and the JSX markup for a standalone controlled Input OTP.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPControlled() {\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <div className=\"space-y-2\">\n      <InputOTP\n        maxLength={6}\n        value={value}\n        onChange={(value) => setValue(value)}\n        render={({ slots }) => (\n          <InputOTPGroup>\n            {slots.map((slot, index) => (\n              <InputOTPSlot key={index} {...slot} />\n            ))}{\" \"}\n          </InputOTPGroup>\n        )}\n      />\n      <div className=\"text-center text-sm\">\n        {value === \"\" ? (\n          <>Enter your one-time password.</>\n        ) : (\n          <>You entered: {value}</>\n        )}\n      </div>\n    </div>\n  )\n}"
  },
  {
    "component": "Input OTP",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Input OTP, use CampEdUI’s Input OTP component with the 'form' variant. Include the import and the JSX markup for a standalone form Input OTP.",
    "code": "\"use client\";\n \nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@camped-ui/input-otp\";\n \nconst FormSchema = z.object({\n  pin: z.string().min(6, {\n    message: \"Your one-time password must be 6 characters.\",\n  }),\n});\n \nexport function InputOTPForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      pin: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"pin\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>One-Time Password</FormLabel>\n              <FormControl>\n                <InputOTP\n                  maxLength={6}\n                  render={({ slots }) => (\n                    <InputOTPGroup>\n                      {slots.map((slot, index) => (\n                        <InputOTPSlot key={index} {...slot} />\n                      ))}{\" \"}\n                    </InputOTPGroup>\n                  )}\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                Please enter the one-time password sent to your phone.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n \n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}"
  },
  {
    "component": "Input OTP",
    "section": "Examples → Pattern",
    "prompt": "In a form where you need a pattern Input OTP, use CampEdUI’s Input OTP component with the 'pattern' variant. Include the import and the JSX markup for a standalone pattern Input OTP.",
    "code": "import { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPPattern() {\n  return (\n    <InputOTP\n      maxLength={6}\n      pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n      render={({ slots }) => (\n        <InputOTPGroup>\n          {slots.map((slot, index) => (\n            <InputOTPSlot key={index} {...slot} />\n          ))}{\" \"}\n        </InputOTPGroup>\n      )}\n    />\n  )\n}"
  },
  {
    "component": "Input OTP",
    "section": "Examples → Separator",
    "prompt": "In a form where you need a separator Input OTP, use CampEdUI’s Input OTP component with the 'separator' variant. Include the import and the JSX markup for a standalone separator Input OTP.",
    "code": "import React from \"react\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPWithSeparator() {\n  return (\n    <InputOTP\n      maxLength={6}\n      render={({ slots }) => (\n        <InputOTPGroup className=\"gap-2\">\n          {slots.map((slot, index) => (\n            <React.Fragment key={index}>\n              <InputOTPSlot className=\"rounded-md border\" {...slot} />\n              {index !== slots.length - 1 && <InputOTPSeparator />}\n            </React.Fragment>\n          ))}{\" \"}\n        </InputOTPGroup>\n      )}\n    />\n  )\n}"
  },
  {
    "component": "Input OTP",
    "section": "Examples → Toggle",
    "prompt": "In a form where you need a toggle Input OTP, use CampEdUI’s Input OTP component with the 'toggle' variant. Include the import and the JSX markup for a standalone toggle Input OTP.",
    "code": "\"use client\";\n \nimport { OtpStyledInput } from \"@camped-ui/input-otp\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"@camped-ui/button\";\nimport { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\n \nconst INPUT_NUM = 4;\n \nconst form = z.object({\n  otp: z.string().min(INPUT_NUM, \"Password confirmation is required\"),\n});\n \ntype Form = z.infer<typeof form>;\n \nenum OtpInputType {\n  password = \"password\",\n  text = \"text\",\n}\n \nconst OTPInputToggle = () => {\n  const [isPassword, setIsPassword] = useState<OtpInputType>(\n    OtpInputType.password\n  );\n  const multiForm = useForm<Form>({\n    resolver: zodResolver(form),\n    defaultValues: {\n      otp: \"\",\n    },\n  });\n \n  const onSubmit = (data: Form) => {\n// Add Toast\n  };\n \n  return (\n    <Form {...multiForm}>\n      <form\n        className=\"grid gap-2 bg-background p-4 rounded-md shadow-md\"\n        onSubmit={multiForm.handleSubmit(onSubmit)}\n      >\n        <FormField\n          control={multiForm.control}\n          name=\"otp\"\n          render={({ field }) => (\n            <FormControl>\n              <>\n                <FormLabel htmlFor={field.name}>\n                  Enter your confirmation password\n                </FormLabel>\n                <FormItem className=\"flex space-y-0 gap-x-2\">\n                  <OtpStyledInput\n                    numInputs={INPUT_NUM}\n                    inputType={isPassword}\n                    {...field}\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"size-9\"\n                    type=\"button\"\n                    onClick={() => {\n                      setIsPassword(\n                        isPassword === OtpInputType.password\n                          ? OtpInputType.text\n                          : OtpInputType.password\n                      );\n                    }}\n                  >\n                    {isPassword === OtpInputType.password ? (\n                      <EyeClosedIcon />\n                    ) : (\n                      <EyeOpenIcon />\n                    )}\n                    <span className=\"sr-only\">{isPassword}</span>\n                  </Button>\n                </FormItem>\n                <FormMessage />\n              </>\n            </FormControl>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-fit\">\n          Submit\n        </Button>\n      </form>\n    </Form>\n  );\n};\n \nexport OTPInputToggle;"
  },
  {
    "component": "Input OTP",
    "section": "Usage",
    "prompt": "In your React app, import the Input OTP component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n\n<InputOTP\n  maxLength={6}\n  render={({ slots }) => (\n    <>\n      <InputOTPGroup>\n        {slots.slice(0, 3).map((slot, index) => (\n          <InputOTPSlot key={index} {...slot} />\n        ))}{\" \"}\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        {slots.slice(3).map((slot, index) => (\n          <InputOTPSlot key={index} {...slot} />\n        ))}\n      </InputOTPGroup>\n    </>\n  )}\n/>"
  },
  {
    "component": "Label",
    "section": "Usage",
    "prompt": "In your React app, import the Label component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Label } from \"@camped-ui/label\";\n\n<Label htmlFor=\"email\">Your email address</Label>"
  },
  {
    "component": "Menubar",
    "section": "Usage",
    "prompt": "In your React app, import the Menubar component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@camped-ui/menubar\";\n\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>"
  },
  {
    "component": "Multi Select",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Multi Select, use CampEdUI’s Multi Select component with the 'default' variant. Include the import and the JSX markup for a standalone default Multi Select.",
    "code": "\"use client\";\n \nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { useState } from \"react\";\n \nconst MultiSelectState = () => {\n  const [value, setValue] = useState<string[]>([]);\n \n  return (\n    <MultiSelector values={value} onValuesChange={setValue}>\n      <MultiSelectorTrigger>\n        <MultiSelectorInput placeholder=\"Select items\" />\n      </MultiSelectorTrigger>\n      <MultiSelectorContent>\n        <MultiSelectorList>\n          <MultiSelectorItem value=\"1\">Item 1</MultiSelectorItem>\n          <MultiSelectorItem value=\"2\">Item 2</MultiSelectorItem>\n          <MultiSelectorItem value=\"3\">Item 3</MultiSelectorItem>\n        </MultiSelectorList>\n      </MultiSelectorContent>\n    </MultiSelector>\n  );\n};\n \nexport MultiSelectState;"
  },
  {
    "component": "Multi Select",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Multi Select, use CampEdUI’s Multi Select component with the 'form' variant. Include the import and the JSX markup for a standalone form Multi Select.",
    "code": "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport Image from \"next/image\";\nimport { useForm } from \"react-hook-form\";\nimport z from \"zod\";\n \nconst form = z.object({\n  value: z.array(z.string()).nonempty(\"Please select at least one person\"),\n});\n \ntype Form = z.infer<typeof form>;\n \nconst users = [\n  {\n    name: \"Outreach\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/636f89816b/outreach-tab-icon.svg\",\n  },\n  {\n    name: \"MailEd\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/395f664471/mail-tab-icon.svg\",\n  },\n  {\n    name: \"Aceprep\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/f08e525263/aceprep-tab-icon.svg\",\n  },\n];\n \nconst MultiSelectZod = () => {\n  const multiForm = useForm<Form>({\n    resolver: zodResolver(form),\n    defaultValues: form.parse({ value: [users[0].name] }),\n  });\n \n  const onSubmit = (data: Form) => {\n// Add Toast\n  };\n \n  return (\n    <Form {...multiForm}>\n      <form\n        onSubmit={multiForm.handleSubmit(onSubmit)}\n        className=\"space-y-3 grid gap-3 w-full\"\n      >\n        <FormField\n          control={multiForm.control}\n          name=\"value\"\n          render={({ field }) => (\n            <FormItem className=\"w-full\">\n              <FormLabel>Interesed Products</FormLabel>\n              <MultiSelector\n                onValuesChange={field.onChange}\n                values={field.value}\n              >\n                <MultiSelectorTrigger>\n                  <MultiSelectorInput placeholder=\"Select people to invite\" />\n                </MultiSelectorTrigger>\n                <MultiSelectorContent>\n                  <MultiSelectorList>\n                    {users.map((user) => (\n                      <MultiSelectorItem key={user.name} value={user.name}>\n                        <div className=\"flex items-center space-x-2\">\n                          <Image\n                            src={user.picture}\n                            alt={user.name}\n                            width={32}\n                            height={32}\n                            className=\"w-8 h-8 rounded-full\"\n                          />\n                          <span>{user.name}</span>\n                        </div>\n                      </MultiSelectorItem>\n                    ))}\n                  </MultiSelectorList>\n                </MultiSelectorContent>\n              </MultiSelector>\n              <FormDescription>\n                Select people to invite to this event\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n};\n \nexport MultiSelectZod;"
  },
  {
    "component": "Multi Select",
    "section": "Examples → Multi-Select with Limit",
    "prompt": "In a form where you need a multi-select with limit Multi Select, use CampEdUI’s Multi Select component with the 'multi-select with limit' variant. Include the import and the JSX markup for a standalone multi-select with limit Multi Select.",
    "code": "\"use client\";\n \nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { useState } from \"react\";\n \nconst MultiSelectWithLimit = () => {\n  const [value, setValue] = useState<string[]>([]);\n \n  return (\n    <MultiSelector values={value} onValuesChange={setValue} limit={3}>\n      <MultiSelectorTrigger>\n        <MultiSelectorInput placeholder=\"Select items\" />\n      </MultiSelectorTrigger>\n      <MultiSelectorContent>\n        <MultiSelectorList>\n          <MultiSelectorItem value=\"Item 1\">Item 1</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 2\">Item 2</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 3\">Item 3</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 4\">Item 4</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 5\">Item 5</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 6\">Item 6</MultiSelectorItem>\n        </MultiSelectorList>\n      </MultiSelectorContent>\n    </MultiSelector>\n  );\n};\n \nexport MultiSelectWithLimit;"
  },
  {
    "component": "Multi Select",
    "section": "Usage",
    "prompt": "In your React app, import the Multi Select component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";"
  },
  {
    "component": "Navigation Menu",
    "section": "Examples → Link Component",
    "prompt": "In a form where you need a link component Navigation Menu, use CampEdUI’s Navigation Menu component with the 'link component' variant. Include the import and the JSX markup for a standalone link component Navigation Menu.",
    "code": "import { navigationMenuTriggerStyle } from \"@camped-ui/navigation-menu\";\n\n<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n      Documentation\n    </NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>"
  },
  {
    "component": "Navigation Menu",
    "section": "Usage",
    "prompt": "In your React app, import the Navigation Menu component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@camped-ui/navigation-menu\";\n\n<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <NavigationMenuLink>Link</NavigationMenuLink>\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>"
  },
  {
    "component": "Pagination",
    "section": "Usage",
    "prompt": "In your React app, import the Pagination component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@camped-ui/pagination\"\n\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"
  },
  {
    "component": "Password Input",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Password Input, use CampEdUI’s Password Input component with the 'default' variant. Include the import and the JSX markup for a standalone default Password Input.",
    "code": "import { PasswordInput } from \"@camped-ui/password-input\"\n \nexport function InputDemo() {\n  return <PasswordInput placeholder=\"********\"  />\n}"
  },
  {
    "component": "Password Input",
    "section": "Usage",
    "prompt": "In your React app, import the Password Input component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { PasswordInput } from \"@camped-ui/password-input\";\n\n<PasswordInput placeholder=\"********\" />"
  },
  {
    "component": "Popover",
    "section": "Usage",
    "prompt": "In your React app, import the Popover component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";\n\n<Popover>\n  <PopoverTrigger>Open</PopoverTrigger>\n  <PopoverContent>Place content for the popover here.</PopoverContent>\n</Popover>"
  },
  {
    "component": "Progress",
    "section": "Usage",
    "prompt": "In your React app, import the Progress component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Progress } from \"@camped-ui/progress\";\n\n<Progress value={33} />"
  },
  {
    "component": "Radio Group",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Radio Group, use CampEdUI’s Radio Group component with the 'form' variant. Include the import and the JSX markup for a standalone form Radio Group.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\"\n \nconst FormSchema = z.object({\n  type: z.enum([\"all\", \"mentions\", \"none\"], {\n    required_error: \"You need to select a notification type.\",\n  }),\n})\n \nexport function RadioGroupForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-3\">\n              <FormLabel>Notify me about...</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className=\"flex flex-col space-y-1\"\n                >\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"all\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      All new messages\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"mentions\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      Direct messages and mentions\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"none\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">Nothing</FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Radio Group",
    "section": "Usage",
    "prompt": "In your React app, import the Radio Group component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\n\n<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>"
  },
  {
    "component": "Resizable",
    "section": "Examples → Handle",
    "prompt": "In a form where you need a handle Resizable, use CampEdUI’s Resizable component with the 'handle' variant. Include the import and the JSX markup for a standalone handle Resizable.",
    "code": "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\";\n \nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"min-h-[200px] max-w-md rounded-lg border\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Sidebar</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}\n\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}"
  },
  {
    "component": "Resizable",
    "section": "Examples → Vertical",
    "prompt": "In a form where you need a vertical Resizable, use CampEdUI’s Resizable component with the 'vertical' variant. Include the import and the JSX markup for a standalone vertical Resizable.",
    "code": "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\";\n \nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"vertical\"\n      className=\"min-h-[200px] max-w-md rounded-lg border\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Header</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}\n\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}"
  },
  {
    "component": "Resizable",
    "section": "Usage",
    "prompt": "In your React app, import the Resizable component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"\n\n<ResizablePanelGroup direction=\"horizontal\">\n  <ResizablePanel>One</ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>"
  },
  {
    "component": "Scroll Area",
    "section": "Examples → Horizontal Scrolling",
    "prompt": "In a form where you need a horizontal scrolling Scroll Area, use CampEdUI’s Scroll Area component with the 'horizontal scrolling' variant. Include the import and the JSX markup for a standalone horizontal scrolling Scroll Area.",
    "code": "import * as React from \"react\"\nimport Image from \"next/image\"\n \nimport { ScrollArea, ScrollBar } from \"@camped-ui/scroll-area\"\n \nexport interface Artwork {\n  artist: string\n  art: string\n}\n \nexport const works: Artwork[] = [\n  {\n    artist: \"Ornella Binni\",\n    art: \"https://images.unsplash.com/photo-1465869185982-5a1a7522cbcb?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Tom Byrom\",\n    art: \"https://images.unsplash.com/photo-1548516173-3cabfa4607e9?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Vladimir Malyavko\",\n    art: \"https://images.unsplash.com/photo-1494337480532-3725c85fd2ab?auto=format&fit=crop&w=300&q=80\",\n  },\n]\n \nexport function ScrollAreaHorizontalDemo() {\n  return (\n    <ScrollArea className=\"w-96 whitespace-nowrap rounded-md border\">\n      <div className=\"flex w-max space-x-4 p-4\">\n        {works.map((artwork) => (\n          <figure key={artwork.artist} className=\"shrink-0\">\n            <div className=\"overflow-hidden rounded-md\">\n              <Image\n                src={artwork.art}\n                alt={`Photo by ${artwork.artist}`}\n                className=\"aspect-[3/4] h-fit w-fit object-cover\"\n                width={300}\n                height={400}\n              />\n            </div>\n            <figcaption className=\"pt-2 text-xs text-muted-foreground\">\n              Photo by{\" \"}\n              <span className=\"font-semibold text-foreground\">\n                {artwork.artist}\n              </span>\n            </figcaption>\n          </figure>\n        ))}\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}"
  },
  {
    "component": "Scroll Area",
    "section": "Usage",
    "prompt": "In your React app, import the Scroll Area component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { ScrollArea } from \"@camped-ui/scroll-area\";\n\n<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving\n  jokes all over the place: under the king's pillow, in his soup, even in the\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n  then, one day, the people of the kingdom discovered that the jokes left by\n  Jokester were so funny that they couldn't help but laugh. And once they\n  started laughing, they couldn't stop.\n</ScrollArea>"
  },
  {
    "component": "Select",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Select, use CampEdUI’s Select component with the 'form' variant. Include the import and the JSX markup for a standalone form Select.",
    "code": "\"use client\"\n \nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nconst FormSchema = z.object({\n  email: z\n    .string({\n      required_error: \"Please select an email to display.\",\n    })\n    .email(),\n})\n \nexport function SelectForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a verified email to display\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"m@example.com\">m@example.com</SelectItem>\n                  <SelectItem value=\"m@google.com\">m@google.com</SelectItem>\n                  <SelectItem value=\"m@support.com\">m@support.com</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                You can manage email addresses in your{\" \"}\n                <Link href=\"/examples/forms\">email settings</Link>.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Select",
    "section": "Examples → Scrollable",
    "prompt": "In a form where you need a scrollable Select, use CampEdUI’s Select component with the 'scrollable' variant. Include the import and the JSX markup for a standalone scrollable Select.",
    "code": "import * as React from \"react\"\n \nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nexport function SelectScrollable() {\n  return (\n    <Select>\n      <SelectTrigger className=\"w-[280px]\">\n        <SelectValue placeholder=\"Select a timezone\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>North America</SelectLabel>\n          <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n          <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n          <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n          <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n          <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n          <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Europe & Africa</SelectLabel>\n          <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n          <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n          <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n          <SelectItem value=\"west\">\n            Western European Summer Time (WEST)\n          </SelectItem>\n          <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n          <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Asia</SelectLabel>\n          <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n          <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n          <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n          <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n          <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n          <SelectItem value=\"ist_indonesia\">\n            Indonesia Central Standard Time (WITA)\n          </SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Australia & Pacific</SelectLabel>\n          <SelectItem value=\"awst\">\n            Australian Western Standard Time (AWST)\n          </SelectItem>\n          <SelectItem value=\"acst\">\n            Australian Central Standard Time (ACST)\n          </SelectItem>\n          <SelectItem value=\"aest\">\n            Australian Eastern Standard Time (AEST)\n          </SelectItem>\n          <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n          <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>South America</SelectLabel>\n          <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n          <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n          <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n          <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  )\n}"
  },
  {
    "component": "Select",
    "section": "Usage",
    "prompt": "In your React app, import the Select component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";\n\n<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Theme\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectItem value=\"light\">Light</SelectItem>\n    <SelectItem value=\"dark\">Dark</SelectItem>\n    <SelectItem value=\"system\">System</SelectItem>\n  </SelectContent>\n</Select>"
  },
  {
    "component": "Separator",
    "section": "Usage",
    "prompt": "In your React app, import the Separator component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Separator } from \"@camped-ui/separator\";\n\n<Separator />"
  },
  {
    "component": "Sheet",
    "section": "Examples → Side",
    "prompt": "In a form where you need a side Sheet, use CampEdUI’s Sheet component with the 'side' variant. Include the import and the JSX markup for a standalone side Sheet.",
    "code": "\"use client\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@camped-ui/sheet\"\n \nconst SHEET_SIDES = [\"top\", \"right\", \"bottom\", \"left\"] as const\n \ntype SheetSide = (typeof SHEET_SIDES)[number]\n \nexport function SheetSide() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {SHEET_SIDES.map((side) => (\n        <Sheet key={side}>\n          <SheetTrigger asChild>\n            <Button variant=\"outline\">{side}</Button>\n          </SheetTrigger>\n          <SheetContent side={side}>\n            <SheetHeader>\n              <SheetTitle>Edit profile</SheetTitle>\n              <SheetDescription>\n                Make changes to your profile here. Click save when you're done.\n              </SheetDescription>\n            </SheetHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">\n                  Name\n                </Label>\n                <Input id=\"name\" value=\"Pedro Duarte\" className=\"col-span-3\" />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"username\" className=\"text-right\">\n                  Username\n                </Label>\n                <Input id=\"username\" value=\"@peduarte\" className=\"col-span-3\" />\n              </div>\n            </div>\n            <SheetFooter>\n              <SheetClose asChild>\n                <Button type=\"submit\">Save changes</Button>\n              </SheetClose>\n            </SheetFooter>\n          </SheetContent>\n        </Sheet>\n      ))}\n    </div>\n  )\n}"
  },
  {
    "component": "Sheet",
    "section": "Examples → Size",
    "prompt": "In a form where you need a size Sheet, use CampEdUI’s Sheet component with the 'size' variant. Include the import and the JSX markup for a standalone size Sheet.",
    "code": "<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent className=\"w-[400px] sm:w-[540px]\">\n    <SheetHeader>\n      <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>"
  },
  {
    "component": "Sheet",
    "section": "Installation → Usage",
    "prompt": "Create a Sheet example for the 'Usage' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@camped-ui/sheet\";\n\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>"
  },
  {
    "component": "Skeleton",
    "section": "Usage",
    "prompt": "In your React app, import the Skeleton component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Skeleton } from \"@camped-ui/skeleton\";\n\n<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />"
  },
  {
    "component": "Slider",
    "section": "Usage",
    "prompt": "In your React app, import the Slider component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Slider } from \"@camped-ui/slider\";\n\n<Slider defaultValue={[33]} max={100} step={1} />"
  },
  {
    "component": "Stepper",
    "section": "API → useStepper",
    "prompt": "Create a Stepper example for the 'useStepper' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { useStepper } from \"@camped-ui/stepper\"\n \nexport funcion UseStepperDemo() {\n  { ... } = useStepper();\n \n  return (\n    <div>\n      { ... }\n    </div>\n  )\n}"
  },
  {
    "component": "Stepper",
    "section": "Examples → Clickable steps",
    "prompt": "In a form where you need a clickable steps Stepper, use CampEdUI’s Stepper component with the 'clickable steps' variant. Include the import and the JSX markup for a standalone clickable steps Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper\n        initialStep={0}\n        steps={steps}\n        onClickStep={(step, setStep) => {\n          // Add Toast\n          setStep(step);\n        }}\n      >\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Custom Icons",
    "prompt": "In a form where you need a custom icons Stepper, use CampEdUI’s Stepper component with the 'custom icons' variant. Include the import and the JSX markup for a standalone custom icons Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\nimport { Building, Star, User } from \"lucide-react\";\n \nconst steps = [\n  { label: \"Step 1\", icon: User },\n  { label: \"Step 2\", icon: Building },\n  { label: \"Step 3\", icon: Star },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Custom styles",
    "prompt": "In a form where you need a custom styles Stepper, use CampEdUI’s Stepper component with the 'custom styles' variant. Include the import and the JSX markup for a standalone custom styles Stepper.",
    "code": "...\n  <Stepper\n    initialStep={0}\n    steps={steps}\n    styles={{\n      \"step-button-container\": cn(\n        \"text-purple-700 rounded-none\",\n        \"data-[current=true]:border-purple-500 data-[current=true]:bg-purple-50\",\n        \"data-[active=true]:bg-purple-500 data-[active=true]:border-purple-500\"\n      ),\n      \"horizontal-step\":\n        \"data-[completed=true]:[&:not(:last-child)]:after:bg-purple-500\",\n    }}\n    variables={{\n      \"--step-icon-size\": \"60px\",\n      \"--step-gap\": \"20px\",\n    }}\n  >\n  // Rest of the code\n  </Stepper>\n...\n\nimport { Button } from \"@camped-ui/button\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper\n        initialStep={0}\n        steps={steps}\n        styles={{\n          \"step-button-container\": cn(\n            \"text-purple-700 rounded-none\",\n            \"data-[current=true]:border-purple-500 data-[current=true]:bg-purple-50\",\n            \"data-[active=true]:bg-purple-500 data-[active=true]:border-purple-500\"\n          ),\n          \"horizontal-step\":\n            \"data-[completed=true]:[&:not(:last-child)]:after:bg-purple-500\",\n        }}\n        variables={{\n          \"--step-icon-size\": \"60px\",\n          \"--step-gap\": \"20px\",\n        }}\n      >\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Stepper, use CampEdUI’s Stepper component with the 'default' variant. Include the import and the JSX markup for a standalone default Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Description",
    "prompt": "In a form where you need a description Stepper, use CampEdUI’s Stepper component with the 'description' variant. Include the import and the JSX markup for a standalone description Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\", description: \"Description 1\" },\n  { label: \"Step 2\", description: \"Description 2\" },\n  { label: \"Step 3\", description: \"Description 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Footer inside the step",
    "prompt": "In a form where you need a footer inside the step Stepper, use CampEdUI’s Stepper component with the 'footer inside the step' variant. Include the import and the JSX markup for a standalone footer inside the step Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper orientation=\"vertical\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n              <StepButtons />\n            </Step>\n          );\n        })}\n        <FinalStep />\n      </Stepper>\n    </div>\n  );\n}\n \nconst StepButtons = () => {\n  const { nextStep, prevStep, isLastStep, isOptionalStep, isDisabledStep } =\n    useStepper();\n  return (\n    <div className=\"w-full flex gap-2\">\n      <Button\n        disabled={isDisabledStep}\n        onClick={prevStep}\n        size=\"sm\"\n        variant=\"secondary\"\n      >\n        Prev\n      </Button>\n      <Button size=\"sm\" onClick={nextStep}>\n        {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n      </Button>\n    </div>\n  );\n};\n \nconst FinalStep = () => {\n  const { hasCompletedAllSteps, resetSteps } = useStepper();\n \n  if (!hasCompletedAllSteps) {\n    return null;\n  }\n \n  return (\n    <>\n      <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n        <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n      </div>\n      <div className=\"w-full flex justify-end gap-2\">\n        <Button size=\"sm\" onClick={resetSteps}>\n          Reset\n        </Button>\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Optional steps",
    "prompt": "In a form where you need a optional steps Stepper, use CampEdUI’s Stepper component with the 'optional steps' variant. Include the import and the JSX markup for a standalone optional steps Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\", optional: true },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Orientation",
    "prompt": "In a form where you need a orientation Stepper, use CampEdUI’s Stepper component with the 'orientation' variant. Include the import and the JSX markup for a standalone orientation Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  useStepper,\n  type StepperProps,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [orientation, setOrientation] =\n    React.useState<StepperProps[\"orientation\"]>(\"vertical\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={orientation}\n        onValueChange={(value) =>\n          setOrientation(value as StepperProps[\"orientation\"])\n        }\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal\" />\n          <Label htmlFor=\"horizontal\">horizontal</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"vertical\" id=\"vertical\" />\n          <Label htmlFor=\"vertical\">vertical</Label>\n        </div>\n      </RadioGroup>\n      <Stepper orientation={orientation} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Sizes",
    "prompt": "In a form where you need a sizes Stepper, use CampEdUI’s Stepper component with the 'sizes' variant. Include the import and the JSX markup for a standalone sizes Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  StepperProps,\n  useStepper,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [size, setSize] = React.useState<StepperProps[\"size\"]>(\"md\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={size}\n        onValueChange={(value) => setSize(value as StepperProps[\"size\"])}\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"sm\" id=\"sm\" />\n          <Label htmlFor=\"sm\">sm</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"md\" id=\"md\" />\n          <Label htmlFor=\"md\">md</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"lg\" id=\"lg\" />\n          <Label htmlFor=\"lg\">lg</Label>\n        </div>\n      </RadioGroup>\n      <Stepper size={size} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → State",
    "prompt": "In a form where you need a state Stepper, use CampEdUI’s Stepper component with the 'state' variant. Include the import and the JSX markup for a standalone state Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper state=\"error\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isError,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button disabled={isError} size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → Variants",
    "prompt": "In a form where you need a variants Stepper, use CampEdUI’s Stepper component with the 'variants' variant. Include the import and the JSX markup for a standalone variants Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  useStepper,\n  type StepperProps,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [variant, setVariant] =\n    React.useState<StepperProps[\"variant\"]>(\"circle\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={variant}\n        onValueChange={(value) => setVariant(value as StepperProps[\"variant\"])}\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle\" id=\"circle\" />\n          <Label htmlFor=\"circle\">circle</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle-alt\" id=\"circle-alt\" />\n          <Label htmlFor=\"circle-alt\">circle-alt</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"line\" id=\"line\" />\n          <Label htmlFor=\"line\">line</Label>\n        </div>\n      </RadioGroup>\n      <Stepper variant={variant} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → With Forms",
    "prompt": "In a form where you need a with forms Stepper, use CampEdUI’s Stepper component with the 'with forms' variant. Include the import and the JSX markup for a standalone with forms Stepper.",
    "code": "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport { Input } from \"@camped-ui/input\";\nimport { Step, Stepper, useStepper } from \"@camped-ui/stepper\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n \nconst steps = [\n  { label: \"Step 1\", description: \"Description 1\" },\n  { label: \"Step 2\", description: \"Description 2\" },\n];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper variant=\"circle-alt\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          if (index === 0) {\n            return (\n              <Step key={stepProps.label} {...stepProps}>\n                <FirstStepForm />\n              </Step>\n            );\n          }\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <SecondStepForm />\n            </Step>\n          );\n        })}\n        <MyStepperFooter />\n      </Stepper>\n    </div>\n  );\n}\n \nconst FirstFormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n});\n \nfunction FirstStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof FirstFormSchema>>({\n    resolver: zodResolver(FirstFormSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof FirstFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nconst SecondFormSchema = z.object({\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n});\n \nfunction SecondStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof SecondFormSchema>>({\n    resolver: zodResolver(SecondFormSchema),\n    defaultValues: {\n      password: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof SecondFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormDescription>This is your private password.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nfunction StepperFormActions() {\n  const {\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n \n  return (\n    <div className=\"w-full flex justify-end gap-2\">\n      {hasCompletedAllSteps ? (\n        <Button size=\"sm\" onClick={resetSteps}>\n          Reset\n        </Button>\n      ) : (\n        <>\n          <Button\n            disabled={isDisabledStep}\n            onClick={prevStep}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            Prev\n          </Button>\n          <Button size=\"sm\">\n            {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n \nfunction MyStepperFooter() {\n  const { activeStep, resetSteps, steps } = useStepper();\n \n  if (activeStep !== steps.length) {\n    return null;\n  }\n \n  return (\n    <div className=\"flex items-center justify-end gap-2\">\n      <Button onClick={resetSteps}>Reset Stepper with Form</Button>\n    </div>\n  );\n}"
  },
  {
    "component": "Stepper",
    "section": "Usage",
    "prompt": "In your React app, import the Stepper component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Step,\n  Stepper,\n  useStepper,\n  type StepItem,\n} from \"@camped-ui/stepper\"\n\nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[]\n \nexport default function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map(({ label }, index) => {\n          return (\n            <Step key={label} label={label}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          )\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  )\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper()\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  )\n}"
  },
  {
    "component": "Sticky Scroll Reveal",
    "section": "Usage",
    "prompt": "In your React app, import the Sticky Scroll Reveal component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  ScrollContent,\n  StickyScroll,\n  StickyContent,\n  StickyScrollItem,\n} from \"@camped-ui/sticky-scroll-reveal\";\n\n<StickyScroll content={content} />"
  },
  {
    "component": "Switch",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Switch, use CampEdUI’s Switch component with the 'form' variant. Include the import and the JSX markup for a standalone form Switch.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@camped-ui/form\"\nimport { Switch } from \"@camped-ui/switch\"\n \nconst FormSchema = z.object({\n  marketing_emails: z.boolean().default(false).optional(),\n  security_emails: z.boolean(),\n})\n \nexport function SwitchForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      security_emails: true,\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full space-y-6\">\n        <div>\n          <h3 className=\"mb-4 text-lg font-medium\">Email Notifications</h3>\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"marketing_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">\n                      Marketing emails\n                    </FormLabel>\n                    <FormDescription>\n                      Receive emails about new products, features, and more.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"security_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Security emails</FormLabel>\n                    <FormDescription>\n                      Receive emails about your account security.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled\n                      aria-readonly\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Switch",
    "section": "Usage",
    "prompt": "In your React app, import the Switch component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Switch } from \"@camped-ui/switch\";\n\n<Switch />"
  },
  {
    "component": "Table",
    "section": "Usage",
    "prompt": "In your React app, import the Table component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@camped-ui/table\";\n\n<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>"
  },
  {
    "component": "Tabs",
    "section": "Usage",
    "prompt": "In your React app, import the Tabs component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\n\n<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Animation",
    "prompt": "In a form where you need a animation Tag Input, use CampEdUI’s Tag Input component with the 'animation' variant. Include the import and the JSX markup for a standalone animation Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAnimation() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [animationTags, setAnimationTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"none\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"none\">None</TabsTrigger>\n        <TabsTrigger value=\"bounce\">Bounce</TabsTrigger>\n        <TabsTrigger value=\"fade-in\">Fade-in</TabsTrigger>\n        <TabsTrigger value=\"slide-in\">Slide-in</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"none\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"none\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"bounce\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"bounce\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"fade-in\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"fadeIn\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"slide-in\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"slideIn\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Border",
    "prompt": "In a form where you need a border Tag Input, use CampEdUI’s Tag Input component with the 'border' variant. Include the import and the JSX markup for a standalone border Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputBorder() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [borderTags, setBorderTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"none\">No border</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"default\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"none\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"none\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Interaction",
    "prompt": "In a form where you need a interaction Tag Input, use CampEdUI’s Tag Input component with the 'interaction' variant. Include the import and the JSX markup for a standalone interaction Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputInteraction() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [interactionTags, setInteractionTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"clickable\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"clickable\">Clickable</TabsTrigger>\n        <TabsTrigger value=\"non-clickable\">Non-Clickable</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"clickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"non-clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"nonClickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Shape",
    "prompt": "In a form where you need a shape Tag Input, use CampEdUI’s Tag Input component with the 'shape' variant. Include the import and the JSX markup for a standalone shape Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputShape() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [shapeTags, setShapeTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"square\">Square</TabsTrigger>\n        <TabsTrigger value=\"rounded\">Rounded</TabsTrigger>\n        <TabsTrigger value=\"pill\">Pill</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"default\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"square\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"square\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"rounded\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"rounded\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"pill\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"pill\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Size",
    "prompt": "In a form where you need a size Tag Input, use CampEdUI’s Tag Input component with the 'size' variant. Include the import and the JSX markup for a standalone size Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputVariant() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [sizeTags, setSizeTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"small\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"small\">Small</TabsTrigger>\n        <TabsTrigger value=\"medium\">Medium</TabsTrigger>\n        <TabsTrigger value=\"large\">Large</TabsTrigger>\n        <TabsTrigger value=\"x-large\">X-Large</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"small\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"sm\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"medium\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"lg\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"x-large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"xl\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → TextCase",
    "prompt": "In a form where you need a textcase Tag Input, use CampEdUI’s Tag Input component with the 'textcase' variant. Include the import and the JSX markup for a standalone textcase Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTextcase() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [textCaseTags, setTextCaseTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"capitalize\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"capitalize\">Capitalize</TabsTrigger>\n        <TabsTrigger value=\"uppercase\">Uppercase</TabsTrigger>\n        <TabsTrigger value=\"lowercase\">Lowercase</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"capitalize\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"capitalize\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"uppercase\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"uppercase\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"lowercase\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"lowercase\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → TextStyles",
    "prompt": "In a form where you need a textstyles Tag Input, use CampEdUI’s Tag Input component with the 'textstyles' variant. Include the import and the JSX markup for a standalone textstyles Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTextstyles() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [textStyleTags, setTextStyleTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"normal\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"normal\">Normal</TabsTrigger>\n        <TabsTrigger value=\"bold\">Bold</TabsTrigger>\n        <TabsTrigger value=\"italic\">Italic</TabsTrigger>\n        <TabsTrigger value=\"underline\">Underline</TabsTrigger>\n        <TabsTrigger value=\"line-through\">Line through</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"normal\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"normal\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"bold\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"bold\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"italic\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"italic\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"underline\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"underline\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"line-through\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"lineThrough\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Variant",
    "prompt": "In a form where you need a variant Tag Input, use CampEdUI’s Tag Input component with the 'variant' variant. Include the import and the JSX markup for a standalone variant Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputVariant() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [variantTags, setVariantTags] = React.useState<TagType[]>(tags);\n \n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"primary\">Primary</TabsTrigger>\n        <TabsTrigger value=\"destructive\">Destructive</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"primary\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          variant=\"primary\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"destructive\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          variant=\"destructive\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Allow Duplicate tags",
    "prompt": "Create a Tag Input example for the 'Allow Duplicate tags' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAllowDuplicatesTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Travel\" },\n    { id: uuid(), text: \"Sports\" },\n  ];\n \n  const [allowDuplicatesTags, setAllowDuplicatesTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={allowDuplicatesTags}\n        allowDuplicates\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAllowDuplicatesTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Autocomplete",
    "prompt": "Create a Tag Input example for the 'Autocomplete' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAutocomplete() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const autoCompleteOptions = [\n    ...tags,\n    { id: uuid(), text: \"Food\" },\n    { id: uuid(), text: \"Movies\" },\n    { id: uuid(), text: \"Art\" },\n    { id: uuid(), text: \"Books\" },\n  ];\n  const [autocompleteTags, setAutocompleteTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={autocompleteTags}\n        enableAutocomplete\n        restrictTagsToAutocompleteOptions\n        autocompleteOptions={autoCompleteOptions}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAutocompleteTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Clear all tags",
    "prompt": "Create a Tag Input example for the 'Clear all tags' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputClearTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [clearAllTags, setClearAllTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={clearAllTags}\n        clearAll\n        onClearAll={() => {\n          setClearAllTags([]);\n        }}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setClearAllTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Custom tag render",
    "prompt": "Create a Tag Input example for the 'Custom tag render' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport { CheckCircle } from \"lucide-react\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputCustomTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [customRenderTags, setCustomRenderTags] =\n    React.useState<TagType[]>(tags);\n  const renderCustomTag = (tag: TagType) => {\n    return (\n      <div\n        key={tag.id}\n        className={`flex items-center gap-2 p-2 rounded bg-blue-500\n          }`}\n      >\n        <CheckCircle size={16} className=\"text-white\" />\n        <span className=\"text-white text-sm mr-2\">{tag.text}</span>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={customRenderTags}\n        customTagRenderer={renderCustomTag}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setCustomRenderTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Direction tags",
    "prompt": "Create a Tag Input example for the 'Direction tags' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputDirectionTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [directionTags, setDirectionTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"row\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"row\">Row</TabsTrigger>\n        <TabsTrigger value=\"column\">Column</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"row\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={directionTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setDirectionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"column\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={directionTags}\n          size=\"md\"\n          direction=\"column\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setDirectionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Draggable",
    "prompt": "Create a Tag Input example for the 'Draggable' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputDraggableTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [allowDraggableTags, setAllowDraggableTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={allowDraggableTags}\n        draggable\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAllowDraggableTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Input field position",
    "prompt": "Create a Tag Input example for the 'Input field position' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputFieldPosition() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [inputFieldPositionTags, setInputFieldPositionTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"bottom\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"bottom\">Bottom</TabsTrigger>\n        <TabsTrigger value=\"top\">Top</TabsTrigger>\n        <TabsTrigger value=\"inline\">Inline</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"bottom\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"top\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          inputFieldPostion=\"top\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"inline\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          inputFieldPostion=\"inline\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Max Tag",
    "prompt": "Create a Tag Input example for the 'Max Tag' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputMaxTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [maxTags, setMaxTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={maxTags}\n        maxTags={5}\n        showCount\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setMaxTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Tag Popover",
    "prompt": "Create a Tag Input example for the 'Tag Popover' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputPopoverTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [usePopoverTags, setUsePopoverTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={usePopoverTags}\n        usePopoverForTags\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setUsePopoverTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Props → Truncate tag",
    "prompt": "Create a Tag Input example for the 'Truncate tag' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTruncateTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [truncateTags, setTruncateTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={truncateTags}\n        truncate={4}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setTruncateTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Usage",
    "prompt": "In your React app, import the Tag Input component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { TagType, TagInput } from \"@camped-ui/tag-input\";"
  },
  {
    "component": "Text",
    "section": "Usage",
    "prompt": "In your React app, import the Text component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Text } from \"@camped-ui/text\";"
  },
  {
    "component": "Text",
    "section": "Usage",
    "prompt": "In your React app, import the Text component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Text } from \"@camped-ui/text\";"
  },
  {
    "component": "Text",
    "section": "Usage",
    "prompt": "In your React app, import the Text component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Text } from \"@camped-ui/text\";"
  },
  {
    "component": "Text",
    "section": "Usage",
    "prompt": "In your React app, import the Text component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Text } from \"@camped-ui/text\";"
  },
  {
    "component": "Textarea",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Textarea, use CampEdUI’s Textarea component with the 'default' variant. Include the import and the JSX markup for a standalone default Textarea.",
    "code": "import { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaDemo() {\n  return <Textarea placeholder=\"Type your message here.\" />\n}"
  },
  {
    "component": "Textarea",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Textarea, use CampEdUI’s Textarea component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Textarea.",
    "code": "import { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaDisabled() {\n  return <Textarea placeholder=\"Type your message here.\" disabled />\n}"
  },
  {
    "component": "Textarea",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Textarea, use CampEdUI’s Textarea component with the 'form' variant. Include the import and the JSX markup for a standalone form Textarea.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nconst FormSchema = z.object({\n  bio: z\n    .string()\n    .min(10, {\n      message: \"Bio must be at least 10 characters.\",\n    })\n    .max(160, {\n      message: \"Bio must not be longer than 30 characters.\",\n    }),\n})\n \nexport function TextareaForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"bio\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Bio</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Tell us a little bit about yourself\"\n                  className=\"resize-none\"\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                You can <span>@mention</span> other users and organizations.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Textarea",
    "section": "Examples → With Button",
    "prompt": "In a form where you need a with button Textarea, use CampEdUI’s Textarea component with the 'with button' variant. Include the import and the JSX markup for a standalone with button Textarea.",
    "code": "import { Button } from \"@camped-ui/button\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithButton() {\n  return (\n    <div className=\"grid w-full gap-2\">\n      <Textarea placeholder=\"Type your message here.\" />\n      <Button>Send message</Button>\n    </div>\n  )\n}"
  },
  {
    "component": "Textarea",
    "section": "Examples → With Label",
    "prompt": "In a form where you need a with label Textarea, use CampEdUI’s Textarea component with the 'with label' variant. Include the import and the JSX markup for a standalone with label Textarea.",
    "code": "import { Label } from \"@camped-ui/label\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithLabel() {\n  return (\n    <div className=\"grid w-full gap-1.5\">\n      <Label htmlFor=\"message\">Your message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message\" />\n    </div>\n  )\n}"
  },
  {
    "component": "Textarea",
    "section": "Examples → With Text",
    "prompt": "In a form where you need a with text Textarea, use CampEdUI’s Textarea component with the 'with text' variant. Include the import and the JSX markup for a standalone with text Textarea.",
    "code": "import { Label } from \"@camped-ui/label\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithText() {\n  return (\n    <div className=\"grid w-full gap-1.5\">\n      <Label htmlFor=\"message-2\">Your Message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message-2\" />\n      <p className=\"text-sm text-muted-foreground\">\n        Your message will be copied to the support team.\n      </p>\n    </div>\n  )\n}"
  },
  {
    "component": "Textarea",
    "section": "Usage",
    "prompt": "In your React app, import the Textarea component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Textarea } from \"@camped-ui/textarea\";\n\n<Textarea />"
  },
  {
    "component": "Toggle",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Toggle, use CampEdUI’s Toggle component with the 'default' variant. Include the import and the JSX markup for a standalone default Toggle.",
    "code": "import { Bold } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleDemo() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Bold className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Toggle, use CampEdUI’s Toggle component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Toggle.",
    "code": "import { Underline } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleDisabled() {\n  return (\n    <Toggle aria-label=\"Toggle italic\" disabled>\n      <Underline className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Examples → Large",
    "prompt": "In a form where you need a large Toggle, use CampEdUI’s Toggle component with the 'large' variant. Include the import and the JSX markup for a standalone large Toggle.",
    "code": "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleLg() {\n  return (\n    <Toggle size=\"lg\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Examples → Outline",
    "prompt": "In a form where you need a outline Toggle, use CampEdUI’s Toggle component with the 'outline' variant. Include the import and the JSX markup for a standalone outline Toggle.",
    "code": "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleOutline() {\n  return (\n    <Toggle variant=\"outline\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Examples → Small",
    "prompt": "In a form where you need a small Toggle, use CampEdUI’s Toggle component with the 'small' variant. Include the import and the JSX markup for a standalone small Toggle.",
    "code": "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleSm() {\n  return (\n    <Toggle size=\"sm\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Examples → With Text",
    "prompt": "In a form where you need a with text Toggle, use CampEdUI’s Toggle component with the 'with text' variant. Include the import and the JSX markup for a standalone with text Toggle.",
    "code": "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleWithText() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Italic className=\"mr-2 h-4 w-4\" />\n      Italic\n    </Toggle>\n  )\n}"
  },
  {
    "component": "Toggle",
    "section": "Usage",
    "prompt": "In your React app, import the Toggle component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Toggle } from \"@camped-ui/toggle\";\n\n<Toggle>Toggle</Toggle>"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Toggle Group, use CampEdUI’s Toggle Group component with the 'default' variant. Include the import and the JSX markup for a standalone default Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Toggle Group, use CampEdUI’s Toggle Group component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup disabled type=\"single\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Large",
    "prompt": "In a form where you need a large Toggle Group, use CampEdUI’s Toggle Group component with the 'large' variant. Include the import and the JSX markup for a standalone large Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup size={\"lg\"} type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Outline",
    "prompt": "In a form where you need a outline Toggle Group, use CampEdUI’s Toggle Group component with the 'outline' variant. Include the import and the JSX markup for a standalone outline Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup variant=\"outline\" type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Single",
    "prompt": "In a form where you need a single Toggle Group, use CampEdUI’s Toggle Group component with the 'single' variant. Include the import and the JSX markup for a standalone single Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup type=\"single\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Small",
    "prompt": "In a form where you need a small Toggle Group, use CampEdUI’s Toggle Group component with the 'small' variant. Include the import and the JSX markup for a standalone small Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup size={\"sm\"} type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Usage",
    "prompt": "In your React app, import the Toggle Group component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { ToggleGroup, ToggleGroupItem } from \"@camped-ui/toggle-group\";\n\n<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>"
  },
  {
    "component": "Tooltip",
    "section": "Usage",
    "prompt": "In your React app, import the Tooltip component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@camped-ui/tooltip\";\n\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger>Hover</TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"
  },
  {
    "component": "Tree View",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Tree View, use CampEdUI’s Tree View component with the 'default' variant. Include the import and the JSX markup for a standalone default Tree View.",
    "code": "\"use client\";\n \nimport { Tree, Folder, File, CollapseButton } from \"@camped-ui/tree-view\";\n \nconst TreeFileDemo = () => {\n  const elements = [\n    {\n      id: \"1\",\n      isSelectable: true,\n      name: \"src\",\n      children: [\n        {\n          id: \"2\",\n          isSelectable: true,\n          name: \"app.tsx\",\n        },\n        {\n          id: \"3\",\n          isSelectable: true,\n          name: \"components\",\n          children: [\n            {\n              id: \"20\",\n              isSelectable: true,\n              name: \"pages\",\n              children: [\n                {\n                  id: \"21\",\n                  isSelectable: true,\n                  name: \"interface.ts\",\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: \"6\",\n          isSelectable: true,\n          name: \"ui\",\n          children: [\n            {\n              id: \"7\",\n              isSelectable: true,\n              name: \"carousel.tsx\",\n            },\n          ],\n        },\n      ],\n    },\n  ];\n  return (\n    <Tree\n      className=\"rounded-md h-60 bg-background overflow-hidden p-2\"\n      initialSelectedId=\"21\"\n      elements={elements}\n    >\n      <Folder element=\"src\" value=\"1\">\n        <File value=\"2\">\n          <p> app.tsx </p>\n        </File>\n        <Folder value=\"3\" element=\"components\">\n          <Folder value=\"20\" element=\"pages\">\n            <File value=\"21\">\n              <p>interface.ts</p>\n            </File>\n          </Folder>\n        </Folder>\n        <Folder value=\"6\" element=\"ui\">\n          <File value=\"7\">\n            <p>carousel.tsx</p>\n          </File>\n        </Folder>\n      </Folder>\n      <CollapseButton elements={elements} />\n    </Tree>\n  );\n};\n \nexport TreeFileDemo;"
  },
  {
    "component": "Tree View",
    "section": "Examples → With Build-in expand",
    "prompt": "In a form where you need a with build-in expand Tree View, use CampEdUI’s Tree View component with the 'with build-in expand' variant. Include the import and the JSX markup for a standalone with build-in expand Tree View.",
    "code": "import { TreeView } from \"@camped-ui/tree-view\";\n \nconst TreeViewBuiltinExpand = () => {\n  const elements = [\n    {\n      id: \"1\",\n      name: \"Element 1\",\n      children: [\n        {\n          id: \"1.1\",\n          name: \"Element 1.1\",\n          children: [\n            {\n              id: \"1.1.1\",\n              name: \"Element 1.1.1\",\n            },\n            {\n              id: \"1.1.2\",\n              name: \"Element 1.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"1.2\",\n          name: \"Element 1.2\",\n        },\n      ],\n    },\n    {\n      id: \"2\",\n      name: \"Element 2\",\n      children: [\n        {\n          id: \"2.1\",\n          name: \"Element 2.1\",\n        },\n        {\n          id: \"2.2\",\n          name: \"Element 2.2\",\n        },\n      ],\n    },\n    {\n      id: \"3\",\n      name: \"Element 3\",\n    },\n  ];\n \n  return (\n    <TreeView className=\"bg-background h-60\" elements={elements} expandAll />\n  );\n};\n \nexport TreeViewBuiltinExpand;"
  },
  {
    "component": "Tree View",
    "section": "Examples → With Build-in select",
    "prompt": "In a form where you need a with build-in select Tree View, use CampEdUI’s Tree View component with the 'with build-in select' variant. Include the import and the JSX markup for a standalone with build-in select Tree View.",
    "code": "import { TreeView } from \"@camped-ui/tree-view\";\n \nconst TreeViewBuiltinSelect = () => {\n  const elements = [\n    {\n      id: \"1\",\n      name: \"Element 1\",\n      children: [\n        {\n          id: \"1.1\",\n          name: \"Element 1.1\",\n          children: [\n            {\n              id: \"1.1.1\",\n              name: \"Element 1.1.1\",\n            },\n            {\n              id: \"1.1.2\",\n              name: \"Element 1.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"1.2\",\n          name: \"Element 1.2\",\n        },\n      ],\n    },\n    {\n      id: \"2\",\n      name: \"Element 2\",\n      children: [\n        {\n          id: \"2.1\",\n          name: \"Element 2.1\",\n          children: [\n            {\n              id: \"2.1.1\",\n              name: \"Element 2.1.1\",\n            },\n            {\n              id: \"2.1.2\",\n              name: \"Element 2.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"2.2\",\n          name: \"Element 2.2\",\n        },\n      ],\n    },\n    {\n      id: \"3\",\n      name: \"Element 3\",\n    },\n  ];\n \n  return (\n    <TreeView\n      elements={elements}\n      className=\"h-60\"\n      initialExpendedItems={[\"2\"]}\n      initialSelectedId=\"1.1.2\"\n    />\n  );\n};\n \nexport TreeViewBuiltinSelect;"
  },
  {
    "component": "Tree View",
    "section": "Usage",
    "prompt": "In your React app, import the Tree View component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { TreeView } from \"@camped-ui/tree-view\";\n\n <TreeView\n    elements={elements}\n    className=\"h-60\"\n    initialExpendedItems={[\"2\"]}\n    initialSelectedId=\"21\" \n  />"
  },
  {
    "component": "Typewriter Effect",
    "section": "Examples → Default",
    "prompt": "In a form where you need a default Typewriter Effect, use CampEdUI’s Typewriter Effect component with the 'default' variant. Include the import and the JSX markup for a standalone default Typewriter Effect.",
    "code": "\"use client\";\n \nimport { TypewriterEffectSmooth } from \"@camped-ui/typewriter-effect\";\nimport * as React from \"react\";\n \nexport function TypewriterEffectSmoothDemo() {\n  const words = [\n    {\n      text: \"Build\",\n    },\n    {\n      text: \"awesome\",\n    },\n    {\n      text: \"apps\",\n    },\n    {\n      text: \"with\",\n    },\n    {\n      text: \"CampEd.\",\n      className: \"text-blue-500 dark:text-blue-500\",\n    },\n  ];\n  return (\n    <div className=\"flex flex-col items-center justify-center h-[40rem]  \">\n      <p className=\"text-neutral-600 dark:text-neutral-200 text-xs sm:text-base  \">\n        The road to freedom starts from here\n      </p>\n      <TypewriterEffectSmooth words={words} />\n      <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 space-x-0 md:space-x-4\">\n        <button className=\"w-40 h-10 rounded-xl bg-black border dark:border-white border-transparent text-white text-sm\">\n          Join now\n        </button>\n        <button className=\"w-40 h-10 rounded-xl bg-white text-black border border-black  text-sm\">\n          Signup\n        </button>\n      </div>\n    </div>\n  );\n}"
  },
  {
    "component": "Typewriter Effect",
    "section": "Examples → Smooth animation",
    "prompt": "In a form where you need a smooth animation Typewriter Effect, use CampEdUI’s Typewriter Effect component with the 'smooth animation' variant. Include the import and the JSX markup for a standalone smooth animation Typewriter Effect.",
    "code": "\"use client\";\n \nimport { TypewriterEffect } from \"@camped-ui/typewriter-effect\";\nimport * as React from \"react\";\n \nexport function TypewriterEffectDemo() {\n  const words = [\n    {\n      text: \"Build\",\n    },\n    {\n      text: \"awesome\",\n    },\n    {\n      text: \"apps\",\n    },\n    {\n      text: \"with\",\n    },\n    {\n      text: \"CampEd.\",\n      className: \"text-blue-500 dark:text-blue-500\",\n    },\n  ];\n  return (\n    <div className=\"flex flex-col items-center justify-center h-[40rem] \">\n      <p className=\"text-neutral-600 dark:text-neutral-200 text-base  mb-10\">\n        The road to freedom starts from here\n      </p>\n      <TypewriterEffect words={words} />\n      <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 space-x-0 md:space-x-4 mt-10\">\n        <button className=\"w-40 h-10 rounded-xl bg-black border dark:border-white border-transparent text-white text-sm\">\n          Join now\n        </button>\n        <button className=\"w-40 h-10 rounded-xl bg-white text-black border border-black  text-sm\">\n          Signup\n        </button>\n      </div>\n    </div>\n  );\n}"
  },
  {
    "component": "Typewriter Effect",
    "section": "Usage",
    "prompt": "In your React app, import the Typewriter Effect component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { TypewriterEffect } from \"@camped-ui/typewriter-effect\";\n\n<TypewriterEffect words={words} />"
  }
]