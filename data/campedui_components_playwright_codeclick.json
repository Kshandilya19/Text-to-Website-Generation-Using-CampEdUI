[
    {
        "name": "Accordion",
        "url": "https://ui.camped.academy/docs/components/accordion",
        "page_title": "Accordion",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/accordion"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@camped-ui/accordion\";",
                    "<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Alert",
        "url": "https://ui.camped.academy/docs/components/alert",
        "page_title": "Alert",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/alert"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Alert, AlertDescription, AlertTitle } from \"@camped-ui/alert\";",
                    "<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Terminal } from \"lucide-react\"\n \nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@camped-ui/alert\"\n \nexport function AlertDemo() {\n  return (\n    <Alert>\n      <Terminal className=\"h-4 w-4\" />\n      <AlertTitle>Heads up!</AlertTitle>\n      <AlertDescription>\n        You can add components to your app using the cli.\n      </AlertDescription>\n    </Alert>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Destructive",
                        "code_snippets": [
                            "import { AlertCircle } from \"lucide-react\"\n \nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@camped-ui/alert\"\n \nexport function AlertDestructive() {\n  return (\n    <Alert variant=\"destructive\">\n      <AlertCircle className=\"h-4 w-4\" />\n      <AlertTitle>Error</AlertTitle>\n      <AlertDescription>\n        Your session has expired. Please log in again.\n      </AlertDescription>\n    </Alert>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Aspect Ratio",
        "url": "https://ui.camped.academy/docs/components/aspect-ratio",
        "page_title": "Aspect Ratio",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/aspect-ratio"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { AspectRatio } from \"@camped-ui/aspect-ratio\";\nimport Image from \"next/image\";",
                    "<div className=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9}>\n    <Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Avatar",
        "url": "https://ui.camped.academy/docs/components/avatar",
        "page_title": "Avatar",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/avatar"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Avatar, AvatarFallback, AvatarImage } from \"@camped-ui/avatar\";",
                    "<Avatar>\n  <AvatarImage src=\"https://github.com/camped.png\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Badge",
        "url": "https://ui.camped.academy/docs/components/badge",
        "page_title": "Badge",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/badge"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Badge } from \"@camped-ui/badge\";",
                    "<Badge variant=\"outline\">Badge</Badge>"
                ],
                "subsections": [
                    {
                        "subsection": "Link",
                        "code_snippets": [
                            "import { badgeVariants } from \"@camped-ui/badge\";",
                            "<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>"
                        ]
                    }
                ]
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeDemo() {\n  return <Badge>Badge</Badge>\n}"
                        ]
                    },
                    {
                        "subsection": "Secondary",
                        "code_snippets": [
                            "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeSecondary() {\n  return <Badge variant=\"secondary\">Secondary</Badge>\n}"
                        ]
                    },
                    {
                        "subsection": "Outline",
                        "code_snippets": [
                            "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeOutline() {\n  return <Badge variant=\"outline\">Outline</Badge>\n}"
                        ]
                    },
                    {
                        "subsection": "Destructive",
                        "code_snippets": [
                            "import { Badge } from \"@camped-ui/badge\"\n \nexport function BadgeDestructive() {\n  return <Badge variant=\"destructive\">Destructive</Badge>\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Bento Grid",
        "url": "https://ui.camped.academy/docs/components/bento-grid",
        "page_title": "Bento Grid",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/bento-grid"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Populated with Header and Content",
                        "code_snippets": [
                            "\"use client\";\n \nimport { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";\nimport { cn } from \"@camped-ui/lib\";\nimport {\n  IconBoxAlignRightFilled,\n  IconClipboardCopy,\n  IconFileBroken,\n  IconSignature,\n  IconTableColumn,\n} from \"@tabler/icons-react\";\nimport { motion } from \"framer-motion\";\nimport Image from \"next/image\";\nimport React from \"react\";\n \nexport function BentoGridThirdDemo() {\n  return (\n    <BentoGrid className=\"max-w-4xl mx-auto md:auto-rows-[20rem]\">\n      {items.map((item, i) => (\n        <BentoGridItem\n          key={i}\n          title={item.title}\n          description={item.description}\n          header={item.header}\n          className={cn(\"[&>p:text-lg]\", item.className)}\n          icon={item.icon}\n        />\n      ))}\n    </BentoGrid>\n  );\n}\n \nconst SkeletonOne = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n \n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonTwo = () => {\n  const variants = {\n    initial: {\n      width: 0,\n    },\n    animate: {\n      width: \"100%\",\n      transition: {\n        duration: 0.2,\n      },\n    },\n    hover: {\n      width: [\"0%\", \"100%\"],\n      transition: {\n        duration: 2,\n      },\n    },\n  };\n  const arr = new Array(6).fill(0);\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      {arr.map((_, i) => (\n        <motion.div\n          key={\"skelenton-two\" + i}\n          variants={variants}\n          style={{\n            maxWidth: Math.random() * (100 - 40) + 40 + \"%\",\n          }}\n          className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-neutral-100 dark:bg-black w-full h-4\"\n        ></motion.div>\n      ))}\n    </motion.div>\n  );\n};\nconst SkeletonThree = () => {\n  const variants = {\n    initial: {\n      backgroundPosition: \"0 50%\",\n    },\n    animate: {\n      backgroundPosition: [\"0, 50%\", \"100% 50%\", \"0 50%\"],\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={variants}\n      transition={{\n        duration: 5,\n        repeat: Infinity,\n        repeatType: \"reverse\",\n      }}\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] rounded-lg bg-dot-black/[0.2] flex-col space-y-2\"\n      style={{\n        background:\n          \"linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)\",\n        backgroundSize: \"400% 400%\",\n      }}\n    >\n      <motion.div className=\"h-full w-full rounded-lg\"></motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFour = () => {\n  const first = {\n    initial: {\n      x: 20,\n      rotate: -5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  const second = {\n    initial: {\n      x: -20,\n      rotate: 5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-row space-x-2\"\n    >\n      <motion.div\n        variants={first}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Just code in Vanilla Javascript\n        </p>\n        <p className=\"border border-red-500 bg-red-100 dark:bg-red-900/20 text-red-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Delusional\n        </p>\n      </motion.div>\n      <motion.div className=\"h-full relative z-20 w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\">\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Tailwind CSS is cool, you know\n        </p>\n        <p className=\"border border-green-500 bg-green-100 dark:bg-green-900/20 text-green-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Sensible\n        </p>\n      </motion.div>\n      <motion.div\n        variants={second}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          I love angular, RSC, and Redux.\n        </p>\n        <p className=\"border border-orange-500 bg-orange-100 dark:bg-orange-900/20 text-orange-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Helpless\n        </p>\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFive = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n \n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-2xl border border-neutral-100 dark:border-white/[0.2] p-2  items-start space-x-2 bg-white dark:bg-black\"\n      >\n        <Image\n          src=\"/favicon.ico\"\n          alt=\"avatar\"\n          height=\"100\"\n          width=\"100\"\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"text-xs text-neutral-500\">\n          There are a lot of cool framerworks out there like React, Angular,\n          Vue, Svelte that can make your life ....\n        </p>\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center justify-end space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <p className=\"text-xs text-neutral-500\">Use PHP.</p>\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n    </motion.div>\n  );\n};\nconst items = [\n  {\n    title: \"AI Content Generation\",\n    description: (\n      <span className=\"text-sm\">\n        Experience the power of AI in generating unique content.\n      </span>\n    ),\n    header: <SkeletonOne />,\n    className: \"md:col-span-1\",\n    icon: <IconClipboardCopy className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Automated Proofreading\",\n    description: (\n      <span className=\"text-sm\">\n        Let AI handle the proofreading of your documents.\n      </span>\n    ),\n    header: <SkeletonTwo />,\n    className: \"md:col-span-1\",\n    icon: <IconFileBroken className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Contextual Suggestions\",\n    description: (\n      <span className=\"text-sm\">\n        Get AI-powered suggestions based on your writing context.\n      </span>\n    ),\n    header: <SkeletonThree />,\n    className: \"md:col-span-1\",\n    icon: <IconSignature className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Sentiment Analysis\",\n    description: (\n      <span className=\"text-sm\">\n        Understand the sentiment of your text with AI analysis.\n      </span>\n    ),\n    header: <SkeletonFour />,\n    className: \"md:col-span-2\",\n    icon: <IconTableColumn className=\"h-4 w-4 text-neutral-500\" />,\n  },\n \n  {\n    title: \"Text Summarization\",\n    description: (\n      <span className=\"text-sm\">\n        Summarize your lengthy documents with AI technology.\n      </span>\n    ),\n    header: <SkeletonFive />,\n    className: \"md:col-span-1\",\n    icon: <IconBoxAlignRightFilled className=\"h-4 w-4 text-neutral-500\" />,\n  },\n];"
                        ]
                    },
                    {
                        "subsection": "2 Column Grid",
                        "code_snippets": [
                            "import { BentoGrid, BentoGridItem } from \"@camped-ui/bento-grid\";\nimport {\n  IconClipboardCopy,\n  IconFileBroken,\n  IconSignature,\n  IconTableColumn,\n} from \"@tabler/icons-react\";\nimport React from \"react\";\n \nexport function BentoGridSecondDemo() {\n  return (\n    <BentoGrid className=\"max-w-4xl mx-auto md:auto-rows-[20rem]\">\n      {items.map((item, i) => (\n        <BentoGridItem\n          key={i}\n          title={item.title}\n          description={item.description}\n          header={item.header}\n          className={item.className}\n          icon={item.icon}\n        />\n      ))}\n    </BentoGrid>\n  );\n}\nconst Skeleton = () => (\n  <div className=\"flex flex-1 w-full h-full min-h-[6rem] rounded-xl   dark:bg-dot-white/[0.2] bg-dot-black/[0.2] [mask-image:radial-gradient(ellipse_at_center,white,transparent)]  border border-transparent dark:border-white/[0.2] bg-neutral-100 dark:bg-black\"></div>\n);\nconst items = [\n  {\n    title: \"The Dawn of Innovation\",\n    description: \"Explore the birth of groundbreaking ideas and inventions.\",\n    header: <Skeleton />,\n    className: \"md:col-span-2\",\n    icon: <IconClipboardCopy className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Digital Revolution\",\n    description: \"Dive into the transformative power of technology.\",\n    header: <Skeleton />,\n    className: \"md:col-span-1\",\n    icon: <IconFileBroken className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Art of Design\",\n    description: \"Discover the beauty of thoughtful and functional design.\",\n    header: <Skeleton />,\n    className: \"md:col-span-1\",\n    icon: <IconSignature className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"The Power of Communication\",\n    description:\n      \"Understand the impact of effective communication in our lives.\",\n    header: <Skeleton />,\n    className: \"md:col-span-2\",\n    icon: <IconTableColumn className=\"h-4 w-4 text-neutral-500\" />,\n  },\n];"
                        ]
                    }
                ]
            },
            {
                "section": "Props",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Breadcrumb",
        "url": "https://ui.camped.academy/docs/components/breadcrumb",
        "page_title": "Breadcrumb",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/breadcrumb"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\"",
                    "<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Custom separator",
                        "code_snippets": [
                            "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport { SlashIcon } from \"@radix-ui/react-icons\";\n \nexport function BreadcrumbWithCustomSeparator() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={2}>\n          <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}",
                            "import { SlashIcon } from \"@radix-ui/react-icons\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <SlashIcon />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>"
                        ]
                    },
                    {
                        "subsection": "Variants",
                        "code_snippets": [
                            "\"use client\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\n \nconst OPTIONS = [\"ghost\", \"outline\", \"link\", \"default\", \"destructive\"];\n \nconst BreadCrumbVariantPicker = ({\n  variant,\n  setVariant,\n}: {\n  variant: string;\n  setVariant: (variant: string) => void;\n}) => {\n  return (\n    <div className=\"absolute right-2 top-2\">\n      <Select defaultValue=\"ghost\" value={variant} onValueChange={setVariant}>\n        <SelectTrigger className=\"px-2 h-8 bg-background text-xs w-40\">\n          <SelectValue>\n            <span className=\"text-muted-foreground font-bold\">Variant : </span>\n            <span>{variant}</span>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent align=\"end\">\n          {OPTIONS.map((opt, index) => (\n            <SelectItem key={`${opt}-${index}`} value={opt} className=\"text-sm\">\n              {opt}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};\n \nconst BreadCrumbTest = () => {\n  const [variant, setVariant] = useState(\"ghost\");\n  return (\n    <>\n      <Breadcrumb\n        orientation=\"horizontal\"\n        variant={variant as any}\n        className=\"gap-1 bg-background rounded-lg p-2\"\n      >\n        <BreadcrumbItem className=\"px-2 h-7\" index={0}>\n          <Link href=\"/\">Home</Link>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem className=\"px-2 h-7\" index={1}>\n          Settings\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem className=\"px-2 h-7\" index={2}>\n          Account\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <BreadCrumbVariantPicker variant={variant} setVariant={setVariant} />\n    </>\n  );\n};\n \nexport BreadCrumbTest;"
                        ]
                    },
                    {
                        "subsection": "Orientation",
                        "code_snippets": [
                            "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\n \nconst Pages = [\n  {\n    title: \"Home\",\n    path: \"/\",\n  },\n  {\n    title: \"Components\",\n    path: \"/docs/components\",\n  },\n  {\n    title: \"Breadcrumb\",\n    path: \"#\",\n  },\n];\n \nconst BreadcrumbOrientation = () => {\n  return (\n    <Breadcrumb\n      orientation=\"vertical\"\n      variant={\"ghost\"}\n      className=\"gap-1 bg-background rounded-lg p-2\"\n    >\n      {Pages.map((page, index) => {\n        return (\n          <div\n            key={`${page.title}-path`}\n            className=\"flex flex-col items-center gap-1\"\n          >\n            <BreadcrumbItem index={index} className=\"h-8 px-2 \">\n              <Link scroll={false} href={`#`}>\n                {page.title}\n              </Link>\n            </BreadcrumbItem>\n            {index !== Pages.length - 1 && <BreadcrumbSeparator />}\n          </div>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n \nexport BreadcrumbOrientation;"
                        ]
                    },
                    {
                        "subsection": "BreadCrumb Active Item",
                        "code_snippets": [
                            "\"use client\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\nimport { useSearchParams } from \"next/navigation\";\n \nconst Pages = [\n  {\n    title: \"Home\",\n    path: \"/\",\n  },\n  {\n    title: \"Components\",\n    path: \"/docs/components\",\n  },\n  {\n    title: \"Breadcrumb\",\n    path: \"/docs/components/breadcrumb\",\n  },\n];\n \nconst BreadCrumbActiveItem = () => {\n  const searchParams = useSearchParams();\n  const path = searchParams?.get(\"path\");\n  return (\n    <Breadcrumb\n      orientation=\"horizontal\"\n      variant={\"ghost\"}\n      className=\"gap-1 bg-background rounded-lg p-2\"\n    >\n      {Pages.map((page, index) => {\n        const isActive = path === page.path;\n        return (\n          <div key={`${page.title}-path`} className=\"flex items-center gap-1\">\n            <BreadcrumbItem\n              isActive={isActive}\n              index={index}\n              className=\"h-8 px-2 \"\n              activeVariant={{\n                variant: \"default\",\n              }}\n            >\n              <Link scroll={false} href={`?path=${page.path}`}>\n                {page.title}\n              </Link>\n            </BreadcrumbItem>\n            {index !== Pages.length - 1 && <BreadcrumbSeparator />}\n          </div>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n \nexport BreadCrumbActiveItem;"
                        ]
                    },
                    {
                        "subsection": "Dropdown",
                        "code_snippets": [
                            "import { ChevronDownIcon, SlashIcon } from \"@radix-ui/react-icons\"\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n \nexport function BreadcrumbWithDropdown() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={2}>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              Components\n              <ChevronDownIcon className=\"h-4 w-4\" />\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}",
                            "import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \n...\n \n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>"
                        ]
                    },
                    {
                        "subsection": "Collapsed",
                        "code_snippets": [
                            "import {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\n \nexport function BreadcrumbCollapsed() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink asChild>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={2}>\n          <BreadcrumbEllipsis index={2} />\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={3}>\n          <BreadcrumbLink asChild>\n            <Link href=\"/docs/components\">Components</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={4}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}",
                            "import { BreadcrumbEllipsis } from \"@camped-ui/breadcrumb\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>"
                        ]
                    },
                    {
                        "subsection": "Link component",
                        "code_snippets": [
                            "import Link from \"next/link\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\n \nexport function BreadcrumbWithCustomSeparator() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink>\n            <Link href=\"/\">Home</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={2}>\n          <BreadcrumbLink>\n            <Link href=\"/components\">Components</Link>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem index={3}>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}",
                            "import { Link } from \"next/link\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>"
                        ]
                    },
                    {
                        "subsection": "Responsive",
                        "code_snippets": [
                            "\"use client\";\n \nimport * as React from \"react\";\nimport Link from \"next/link\";\n \nimport { useMediaQuery } from \"@/hooks/use-media-query\";\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport { Button } from \"@camped-ui/button\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@camped-ui/drawer\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n \nconst items = [\n  { href: \"#\", label: \"Home\" },\n  { href: \"#\", label: \"Documentation\" },\n  { href: \"#\", label: \"Building Your Application\" },\n  { href: \"#\", label: \"Data Fetching\" },\n  { label: \"Caching and Revalidating\" },\n];\n \nconst ITEMS_TO_DISPLAY = 3;\n \nexport function BreadcrumbResponsive() {\n  const [open, setOpen] = React.useState(false);\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n \n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem index={1}>\n          <BreadcrumbLink href={items[0].href}>{items[0].label}</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        {items.length > ITEMS_TO_DISPLAY ? (\n          <>\n            <BreadcrumbItem index={2}>\n              {isDesktop ? (\n                <DropdownMenu open={open} onOpenChange={setOpen}>\n                  <DropdownMenuTrigger\n                    className=\"flex items-center gap-1\"\n                    aria-label=\"Toggle menu\"\n                  >\n                    <BreadcrumbEllipsis className=\"h-4 w-4\" index={2} />\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    {items.slice(1, -2).map((item, index) => (\n                      <DropdownMenuItem key={index}>\n                        <Link href={item.href ? item.href : \"#\"}>\n                          {item.label}\n                        </Link>\n                      </DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Drawer open={open} onOpenChange={setOpen}>\n                  <DrawerTrigger aria-label=\"Toggle Menu\">\n                    <BreadcrumbEllipsis className=\"h-4 w-4\" index={2} />\n                  </DrawerTrigger>\n                  <DrawerContent>\n                    <DrawerHeader className=\"text-left\">\n                      <DrawerTitle>Navigate to</DrawerTitle>\n                      <DrawerDescription>\n                        Select a page to navigate to.\n                      </DrawerDescription>\n                    </DrawerHeader>\n                    <div className=\"grid gap-1 px-4\">\n                      {items.slice(1, -2).map((item, index) => (\n                        <Link\n                          key={index}\n                          href={item.href ? item.href : \"#\"}\n                          className=\"py-1 text-sm\"\n                        >\n                          {item.label}\n                        </Link>\n                      ))}\n                    </div>\n                    <DrawerFooter className=\"pt-4\">\n                      <DrawerClose asChild>\n                        <Button variant=\"outline\">Close</Button>\n                      </DrawerClose>\n                    </DrawerFooter>\n                  </DrawerContent>\n                </Drawer>\n              )}\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n          </>\n        ) : null}\n        {items.slice(-ITEMS_TO_DISPLAY + 1).map((item, index) => (\n          <BreadcrumbItem index={index}>\n            {item.href ? (\n              <>\n                <BreadcrumbLink\n                  asChild\n                  className=\"max-w-20 truncate md:max-w-none\"\n                >\n                  <Link href={item.href}>{item.label}</Link>\n                </BreadcrumbLink>\n                <BreadcrumbSeparator />\n              </>\n            ) : (\n              <BreadcrumbPage className=\"max-w-20 truncate md:max-w-none\">\n                {item.label}\n              </BreadcrumbPage>\n            )}\n          </BreadcrumbItem>\n        ))}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Button",
        "url": "https://ui.camped.academy/docs/components/button",
        "page_title": "Button",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/button"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Button } from \"@camped-ui/button\";"
                ],
                "subsections": []
            },
            {
                "section": "Link",
                "pre_snippets": [
                    "import { buttonVariants } from \"@camped-ui/button\";",
                    "<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>",
                    "<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Primary",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonDemo() {\n  return <Button>Button</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Secondary",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonSecondary() {\n  return <Button variant=\"secondary\">Secondary</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Destructive",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonDestructive() {\n  return <Button variant=\"destructive\">Destructive</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Outline",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonOutline() {\n  return <Button variant=\"outline\">Outline</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Ghost",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonGhost() {\n  return <Button variant=\"ghost\">Ghost</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Link",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonLink() {\n  return <Button variant=\"link\">Link</Button>\n}"
                        ]
                    },
                    {
                        "subsection": "Icon",
                        "code_snippets": [
                            "import { ChevronRight } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonIcon() {\n  return (\n    <Button variant=\"outline\" size=\"icon\">\n      <ChevronRight className=\"h-4 w-4\" />\n    </Button>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Icon",
                        "code_snippets": [
                            "import { Mail } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonWithIcon() {\n  return (\n    <Button>\n      <Mail className=\"mr-2 h-4 w-4\" /> Login with Email\n    </Button>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Loading",
                        "code_snippets": [
                            "import { Loader2 } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonLoading() {\n  return (\n    <Button disabled>\n      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      Please wait\n    </Button>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "As Child",
                        "code_snippets": [
                            "import Link from \"next/link\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonAsChild() {\n  return (\n    <Button asChild>\n      <Link href=\"/login\">Login</Link>\n    </Button>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Card",
        "url": "https://ui.camped.academy/docs/components/card",
        "page_title": "Card",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/card"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@camped-ui/card\";",
                    "<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [
                    "import { BellRing, Check } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@camped-ui/card\"\nimport { Switch } from \"@camped-ui/switch\"\n \nconst notifications = [\n  {\n    title: \"Your call has been confirmed.\",\n    description: \"1 hour ago\",\n  },\n  {\n    title: \"You have a new message!\",\n    description: \"1 hour ago\",\n  },\n  {\n    title: \"Your subscription is expiring soon!\",\n    description: \"2 hours ago\",\n  },\n]\n \ntype CardProps = React.ComponentProps<typeof Card>\n \nexport function CardDemo({ className, ...props }: CardProps) {\n  return (\n    <Card className={cn(\"w-[380px]\", className)} {...props}>\n      <CardHeader>\n        <CardTitle>Notifications</CardTitle>\n        <CardDescription>You have 3 unread messages.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4\">\n        <div className=\" flex items-center space-x-4 rounded-md border p-4\">\n          <BellRing />\n          <div className=\"flex-1 space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">\n              Push Notifications\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Send notifications to device.\n            </p>\n          </div>\n          <Switch />\n        </div>\n        <div>\n          {notifications.map((notification, index) => (\n            <div\n              key={index}\n              className=\"mb-4 grid grid-cols-[25px_1fr] items-start pb-4 last:mb-0 last:pb-0\"\n            >\n              <span className=\"flex h-2 w-2 translate-y-1 rounded-full bg-sky-500\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {notification.title}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {notification.description}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\">\n          <Check className=\"mr-2 h-4 w-4\" /> Mark all as read\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Carousel",
        "url": "https://ui.camped.academy/docs/components/carousel",
        "page_title": "Carousel",
        "sections": [
            {
                "section": "About",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/carousel"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";",
                    "<Carousel>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n  <CarouselPrevious />\n  <CarouselNext />\n</Carousel>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Sizes",
                        "code_snippets": [
                            "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselSize() {\n  return (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      className=\"w-full max-w-sm\"\n    >\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}",
                            "// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>",
                            "// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
                        ]
                    },
                    {
                        "subsection": "Spacing",
                        "code_snippets": [
                            "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselSpacing() {\n  return (\n    <Carousel className=\"w-full max-w-sm\">\n      <CarouselContent className=\"-ml-1\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pl-1 md:basis-1/2 lg:basis-1/3\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-2xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}",
                            "<Carousel>\n  <CarouselContent className=\"-ml-4\">\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>",
                            "<Carousel>\n  <CarouselContent className=\"-ml-2 md:-ml-4\">\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
                        ]
                    },
                    {
                        "subsection": "Slider",
                        "code_snippets": [
                            "import {\n  Carousel,\n  CarouselContent,\n  CarouselThumbsContainer,\n  CarouselItem,\n  SliderThumbItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselSlider = () => {\n  return (\n    <Carousel\n      orientation=\"vertical\"\n      className=\"flex items-center gap-2 w-full max-w-sm\"\n    >\n      <div className=\"relative basis-3/4 py-4 \">\n        <CarouselContent className=\"h-60 gap-2 -mt-0\">\n          {Array.from({ length: 10 }).map((_, index) => (\n            <CarouselItem\n              key={index}\n              className=\"border border-muted flex items-center justify-center h-52 rounded-md\"\n            >\n              Slide {index + 1}\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n      </div>\n      <CarouselThumbsContainer className=\"h-60 basis-1/4\">\n        {Array.from({ length: 10 }).map((_, index) => (\n          <SliderThumbItem\n            key={index}\n            index={index}\n            className=\"rounded-md bg-transparent\"\n          >\n            <span className=\"border border-muted flex items-center justify-center h-full w-full rounded-md cursor-pointer bg-background\">\n              Slide {index + 1}\n            </span>\n          </SliderThumbItem>\n        ))}\n      </CarouselThumbsContainer>\n    </Carousel>\n  );\n};\n \nexport CarouselSlider;"
                        ]
                    },
                    {
                        "subsection": "Orientation",
                        "code_snippets": [
                            "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselOrientation() {\n  return (\n    <Carousel\n      opts={{\n        align: \"start\",\n      }}\n      orientation=\"vertical\"\n      className=\"w-full max-w-xs\"\n    >\n      <CarouselContent className=\"-mt-1 h-[200px]\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"pt-1 md:basis-1/2\">\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex items-center justify-center p-6\">\n                  <span className=\"text-3xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}",
                            "<Carousel orientation=\"vertical | horizontal\">\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
                        ]
                    },
                    {
                        "subsection": "Orientation with Container",
                        "code_snippets": [
                            "import {\n  Carousel,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  CarouselItem,\n  CarouselThumbsContainer,\n  SliderThumbItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselOrientationWithContainer = () => {\n  return (\n    <Carousel>\n      <CarouselNext className=\"top-1/3 -translate-y-1/3\" />\n      <CarouselPrevious className=\"top-1/3 -translate-y-1/3\" />\n      <CarouselContent className=\"h-60 p-1\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index} className=\"bg-transparent  \">\n            <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n              Slide {index + 1}\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselThumbsContainer>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <SliderThumbItem key={index} index={index} className=\"bg-transparent\">\n            <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n              Slide {index + 1}\n            </div>\n          </SliderThumbItem>\n        ))}\n      </CarouselThumbsContainer>\n    </Carousel>\n  );\n};\n \nexport CarouselOrientationWithContainer;"
                        ]
                    },
                    {
                        "subsection": "Indicator",
                        "code_snippets": [
                            "import {\n  Carousel,\n  CarouselIndicator,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  CarouselThumbsContainer,\n  CarouselItem,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nconst CarouselIndicatorExample = () => {\n  return (\n    <Carousel>\n      <CarouselNext />\n      <CarouselPrevious />\n      <div className=\"relative \">\n        <CarouselContent className=\"h-60 p-1 pl-2\">\n          {Array.from({ length: 5 }).map((_, index) => (\n            <CarouselItem key={index} className=\"bg-transparent\">\n              <div className=\"outline outline-1 outline-border size-full flex items-center justify-center rounded-xl bg-background\">\n                Slide {index + 1}\n              </div>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <div className=\"absolute bottom-2 left-1/2 -translate-x-1/2\">\n          <CarouselThumbsContainer className=\"gap-x-1 \">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <CarouselIndicator key={index} index={index} />\n            ))}\n          </CarouselThumbsContainer>\n        </div>\n      </div>\n    </Carousel>\n  );\n};\n \nexport CarouselIndicatorExample;"
                        ]
                    }
                ]
            },
            {
                "section": "Options",
                "pre_snippets": [
                    "<Carousel\n  opts={{\n    align: \"start\",\n    loop: true,\n  }}\n>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>"
                ],
                "subsections": []
            },
            {
                "section": "API",
                "pre_snippets": [
                    "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n  type CarouselApi,\n} from \"@camped-ui/carousel\";\nimport * as React from \"react\";\n \nexport function CarouselDApiDemo() {\n  const [api, setApi] = React.useState<CarouselApi>();\n  const [current, setCurrent] = React.useState(0);\n  const [count, setCount] = React.useState(0);\n \n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n \n    setCount(api.scrollSnapList().length);\n    setCurrent(api.selectedScrollSnap() + 1);\n \n    api.on(\"select\", () => {\n      console.log(\"current\");\n      setCurrent(api.selectedScrollSnap() + 1);\n    });\n  }, [api]);\n \n  return (\n    <div>\n      <Carousel setApi={setApi} className=\"w-full max-w-xs\">\n        <CarouselContent>\n          {Array.from({ length: 5 }).map((_, index) => (\n            <CarouselItem key={index}>\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-4xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n      <div className=\"py-2 text-center text-sm text-muted-foreground\">\n        Slide {current} of {count}\n      </div>\n    </div>\n  );\n}",
                    "import { type CarouselApi } from \"@camped-ui/carousel\";\n \nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>();\n  const [current, setCurrent] = React.useState(0);\n  const [count, setCount] = React.useState(0);\n \n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n \n    setCount(api.scrollSnapList().length);\n    setCurrent(api.selectedScrollSnap() + 1);\n \n    api.on(\"select\", () => {\n      setCurrent(api.selectedScrollSnap() + 1);\n    });\n  }, [api]);\n \n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  );\n}"
                ],
                "subsections": []
            },
            {
                "section": "Events",
                "pre_snippets": [
                    "import { type CarouselApi } from \"@camped-ui/carousel\";\n \nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>();\n \n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n \n    api.on(\"select\", () => {\n      // Do something on select.\n    });\n  }, [api]);\n \n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  );\n}"
                ],
                "subsections": []
            },
            {
                "section": "Plugins",
                "pre_snippets": [
                    "import Autoplay from \"embla-carousel-autoplay\";\n \nexport function Example() {\n  return (\n    <Carousel\n      plugins={[\n        Autoplay({\n          delay: 2000,\n        }),\n      ]}\n    >\n      // ...\n    </Carousel>\n  );\n}",
                    "import { Card, CardContent } from \"@camped-ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@camped-ui/carousel\";\nimport Autoplay from \"embla-carousel-autoplay\";\nimport * as React from \"react\";\n \nexport function CarouselPlugin() {\n  const plugin = React.useRef(\n    Autoplay({ delay: 2000, stopOnInteraction: true })\n  );\n \n  return (\n    <Carousel\n      plugins={[plugin.current]}\n      className=\"w-full max-w-xs\"\n      onMouseEnter={plugin.current.stop}\n      onMouseLeave={plugin.current.reset}\n    >\n      <CarouselContent>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index}>\n            <div className=\"p-1\">\n              <Card>\n                <CardContent className=\"flex aspect-square items-center justify-center p-6\">\n                  <span className=\"text-4xl font-semibold\">{index + 1}</span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  );\n}"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Collapsible",
        "url": "https://ui.camped.academy/docs/components/collapsible",
        "page_title": "Collapsible",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/collapsible"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@camped-ui/collapsible\";",
                    "<Collapsible>\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n  <CollapsibleContent>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </CollapsibleContent>\n</Collapsible>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Command",
        "url": "https://ui.camped.academy/docs/components/command",
        "page_title": "Command",
        "sections": [
            {
                "section": "About",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/command"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@camped-ui/command\";",
                    "<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Dialog",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n \nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@camped-ui/command\"\n \nexport function CommandDialogDemo() {\n  const [open, setOpen] = React.useState(false)\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n \n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n \n  return (\n    <>\n      <p className=\"text-sm text-muted-foreground\">\n        Press{\" \"}\n        <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n          <span className=\"text-xs\">⌘</span>J\n        </kbd>\n      </p>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile className=\"mr-2 h-4 w-4\" />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem>\n              <Calculator className=\"mr-2 h-4 w-4\" />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n              <CommandShortcut>⌘P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              <span>Billing</span>\n              <CommandShortcut>⌘B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n              <CommandShortcut>⌘S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}",
                            "export function CommandMenu() {\n  const [open, setOpen] = React.useState(false);\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n \n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Combobox",
                        "code_snippets": []
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Context Menu",
        "url": "https://ui.camped.academy/docs/components/context-menu",
        "page_title": "Context Menu",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/context-menu"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@camped-ui/context-menu\";",
                    "<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Data Table",
        "url": "https://ui.camped.academy/docs/components/data-table",
        "page_title": "Data Table",
        "sections": [
            {
                "section": "Introduction",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Table of Contents",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/table",
                    "yarn add @tanstack/react-table"
                ],
                "subsections": []
            },
            {
                "section": "Prerequisites",
                "pre_snippets": [
                    "type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n \nexport const payments: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n]"
                ],
                "subsections": []
            },
            {
                "section": "Project Structure",
                "pre_snippets": [
                    "app\n└── payments\n    ├── columns.tsx\n    ├── data-table.tsx\n    └── page.tsx"
                ],
                "subsections": []
            },
            {
                "section": "Basic Table",
                "pre_snippets": [
                    "\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\n \n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]",
                    "\"use client\"\n \nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@camped-ui/table\"\n \ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n \n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}",
                    "import { Payment, columns } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n \nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n \nexport default async function DemoPage() {\n  const data = await getData()\n \n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Cell Formatting",
                "pre_snippets": [
                    "export const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n \n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]"
                ],
                "subsections": []
            },
            {
                "section": "Row Actions",
                "pre_snippets": [
                    "\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const payment = row.original\n \n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]"
                ],
                "subsections": []
            },
            {
                "section": "Pagination",
                "pre_snippets": [
                    "import {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n \n  // ...\n}",
                    "import { Button } from \"@camped-ui/button\"\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Sorting",
                "pre_snippets": [
                    "\"use client\"\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}",
                    "\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown, MoreHorizontal } from \"lucide-react\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]"
                ],
                "subsections": []
            },
            {
                "section": "Filtering",
                "pre_snippets": [
                    "\"use client\"\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Visibility",
                "pre_snippets": [
                    "\"use client\"\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Row Selection",
                "pre_snippets": [
                    "\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\n \nimport { Badge } from \"@camped-ui/badge\"\nimport { Checkbox } from \"@camped-ui/checkbox\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]",
                    "export function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n \n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n \n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n}",
                    "<div className=\"flex-1 text-sm text-muted-foreground\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>"
                ],
                "subsections": []
            },
            {
                "section": "Reusable Components",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Column header",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\nimport { cn } from \"@camped-ui/lib\";\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  CaretSortIcon,\n  EyeNoneIcon,\n} from \"@radix-ui/react-icons\";\nimport { Column } from \"@tanstack/react-table\";\n \ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n \nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n \n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUpIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDownIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeNoneIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}",
                            "export const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n  },\n]"
                        ]
                    },
                    {
                        "subsection": "Pagination",
                        "code_snippets": [
                            "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon,\n} from \"@radix-ui/react-icons\";\nimport { Table } from \"@tanstack/react-table\";\n \ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n \nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <DoubleArrowLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRightIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <DoubleArrowRightIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}",
                            "<DataTablePagination table={table} />"
                        ]
                    },
                    {
                        "subsection": "Column toggle",
                        "code_snippets": [
                            "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@camped-ui/dropdown-menu\";\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\nimport { MixerHorizontalIcon } from \"@radix-ui/react-icons\";\nimport { Table } from \"@tanstack/react-table\";\n \ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n \nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}",
                            "<DataTableViewOptions table={table} />"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Dropdown Menu",
        "url": "https://ui.camped.academy/docs/components/dropdown-menu",
        "page_title": "Dropdown Menu",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/dropdown-menu"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";",
                    "<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Checkboxes",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \ntype Checked = DropdownMenuCheckboxItemProps[\"checked\"]\n \nexport function DropdownMenuCheckboxes() {\n  const [showStatusBar, setShowStatusBar] = React.useState<Checked>(true)\n  const [showActivityBar, setShowActivityBar] = React.useState<Checked>(false)\n  const [showPanel, setShowPanel] = React.useState<Checked>(false)\n \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Appearance</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={showStatusBar}\n          onCheckedChange={setShowStatusBar}\n        >\n          Status Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showActivityBar}\n          onCheckedChange={setShowActivityBar}\n          disabled\n        >\n          Activity Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showPanel}\n          onCheckedChange={setShowPanel}\n        >\n          Panel\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Radio Group",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \nexport function DropdownMenuRadioGroupDemo() {\n  const [position, setPosition] = React.useState(\"bottom\")\n \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\">\n        <DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n          <DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Form",
        "url": "https://ui.camped.academy/docs/components/form",
        "page_title": "React Hook Form",
        "sections": [
            {
                "section": "Features",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Anatomy",
                "pre_snippets": [
                    "<Form>\n  <FormField\n    control={...}\n    name=\"...\"\n    render={() => (\n      <FormItem>\n        <FormLabel />\n        <FormControl>\n          { /* Your form field */}\n        </FormControl>\n        <FormDescription />\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n</Form>"
                ],
                "subsections": []
            },
            {
                "section": "Example",
                "pre_snippets": [
                    "const form = useForm()\n<FormField\n  control={form.control}\n  name=\"username\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"camped\" {...field} />\n      </FormControl>\n      <FormDescription>This is your public display name.</FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>"
                ],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/form"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "\"use client\"\n \nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})",
                    "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n \n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}",
                    "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Input } from \"@camped-ui/input\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // ...\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Hover Card",
        "url": "https://ui.camped.academy/docs/components/hover-card",
        "page_title": "Hover Card",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/hover-card"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@camped-ui/hover-card\";",
                    "<HoverCard>\n  <HoverCardTrigger>Hover</HoverCardTrigger>\n  <HoverCardContent>\n    The React Framework – created and maintained by @vercel.\n  </HoverCardContent>\n</HoverCard>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Label",
        "url": "https://ui.camped.academy/docs/components/label",
        "page_title": "Label",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/label"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Label } from \"@camped-ui/label\";",
                    "<Label htmlFor=\"email\">Your email address</Label>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Menubar",
        "url": "https://ui.camped.academy/docs/components/menubar",
        "page_title": "Menubar",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/menubar"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@camped-ui/menubar\";",
                    "<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Navigation Menu",
        "url": "https://ui.camped.academy/docs/components/navigation-menu",
        "page_title": "Navigation Menu",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/navigation-menu"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@camped-ui/navigation-menu\";",
                    "<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <NavigationMenuLink>Link</NavigationMenuLink>\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Link Component",
                        "code_snippets": [
                            "import { navigationMenuTriggerStyle } from \"@camped-ui/navigation-menu\";",
                            "<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n      Documentation\n    </NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Pagination",
        "url": "https://ui.camped.academy/docs/components/pagination",
        "page_title": "Pagination",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/pagination"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@camped-ui/pagination\"",
                    "<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Progress",
        "url": "https://ui.camped.academy/docs/components/progress",
        "page_title": "Progress",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/progress"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Progress } from \"@camped-ui/progress\";",
                    "<Progress value={33} />"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Resizable",
        "url": "https://ui.camped.academy/docs/components/resizable",
        "page_title": "Resizable",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/resizable"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"",
                    "<ResizablePanelGroup direction=\"horizontal\">\n  <ResizablePanel>One</ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Vertical",
                        "code_snippets": [
                            "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\";\n \nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"vertical\"\n      className=\"min-h-[200px] max-w-md rounded-lg border\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Header</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}",
                            "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Handle",
                        "code_snippets": [
                            "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\";\n \nexport function ResizableDemo() {\n  return (\n    <ResizablePanelGroup\n      direction=\"horizontal\"\n      className=\"min-h-[200px] max-w-md rounded-lg border\"\n    >\n      <ResizablePanel defaultSize={25}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Sidebar</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel defaultSize={75}>\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <span className=\"font-semibold\">Content</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}",
                            "import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@camped-ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Scroll Area",
        "url": "https://ui.camped.academy/docs/components/scroll-area",
        "page_title": "Scroll-area",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/scroll-area"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { ScrollArea } from \"@camped-ui/scroll-area\";",
                    "<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving\n  jokes all over the place: under the king's pillow, in his soup, even in the\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n  then, one day, the people of the kingdom discovered that the jokes left by\n  Jokester were so funny that they couldn't help but laugh. And once they\n  started laughing, they couldn't stop.\n</ScrollArea>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Horizontal Scrolling",
                        "code_snippets": [
                            "import * as React from \"react\"\nimport Image from \"next/image\"\n \nimport { ScrollArea, ScrollBar } from \"@camped-ui/scroll-area\"\n \nexport interface Artwork {\n  artist: string\n  art: string\n}\n \nexport const works: Artwork[] = [\n  {\n    artist: \"Ornella Binni\",\n    art: \"https://images.unsplash.com/photo-1465869185982-5a1a7522cbcb?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Tom Byrom\",\n    art: \"https://images.unsplash.com/photo-1548516173-3cabfa4607e9?auto=format&fit=crop&w=300&q=80\",\n  },\n  {\n    artist: \"Vladimir Malyavko\",\n    art: \"https://images.unsplash.com/photo-1494337480532-3725c85fd2ab?auto=format&fit=crop&w=300&q=80\",\n  },\n]\n \nexport function ScrollAreaHorizontalDemo() {\n  return (\n    <ScrollArea className=\"w-96 whitespace-nowrap rounded-md border\">\n      <div className=\"flex w-max space-x-4 p-4\">\n        {works.map((artwork) => (\n          <figure key={artwork.artist} className=\"shrink-0\">\n            <div className=\"overflow-hidden rounded-md\">\n              <Image\n                src={artwork.art}\n                alt={`Photo by ${artwork.artist}`}\n                className=\"aspect-[3/4] h-fit w-fit object-cover\"\n                width={300}\n                height={400}\n              />\n            </div>\n            <figcaption className=\"pt-2 text-xs text-muted-foreground\">\n              Photo by{\" \"}\n              <span className=\"font-semibold text-foreground\">\n                {artwork.artist}\n              </span>\n            </figcaption>\n          </figure>\n        ))}\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Separator",
        "url": "https://ui.camped.academy/docs/components/separator",
        "page_title": "Separator",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/separator"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Separator } from \"@camped-ui/separator\";",
                    "<Separator />"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Skeleton",
        "url": "https://ui.camped.academy/docs/components/skeleton",
        "page_title": "Skeleton",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/skeleton"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Skeleton } from \"@camped-ui/skeleton\";",
                    "<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Slider",
        "url": "https://ui.camped.academy/docs/components/slider",
        "page_title": "Slider",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/slider"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Slider } from \"@camped-ui/slider\";",
                    "<Slider defaultValue={[33]} max={100} step={1} />"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Stepper",
        "url": "https://ui.camped.academy/docs/components/stepper",
        "page_title": "Stepper",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/stepper"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Step,\n  Stepper,\n  useStepper,\n  type StepItem,\n} from \"@camped-ui/stepper\"",
                    "const steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[]\n \nexport default function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map(({ label }, index) => {\n          return (\n            <Step key={label} label={label}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          )\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  )\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper()\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  )\n}"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Orientation",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  useStepper,\n  type StepperProps,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [orientation, setOrientation] =\n    React.useState<StepperProps[\"orientation\"]>(\"vertical\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={orientation}\n        onValueChange={(value) =>\n          setOrientation(value as StepperProps[\"orientation\"])\n        }\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal\" />\n          <Label htmlFor=\"horizontal\">horizontal</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"vertical\" id=\"vertical\" />\n          <Label htmlFor=\"vertical\">vertical</Label>\n        </div>\n      </RadioGroup>\n      <Stepper orientation={orientation} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Description",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\", description: \"Description 1\" },\n  { label: \"Step 2\", description: \"Description 2\" },\n  { label: \"Step 3\", description: \"Description 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Optional steps",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\", optional: true },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Variants",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  useStepper,\n  type StepperProps,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [variant, setVariant] =\n    React.useState<StepperProps[\"variant\"]>(\"circle\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={variant}\n        onValueChange={(value) => setVariant(value as StepperProps[\"variant\"])}\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle\" id=\"circle\" />\n          <Label htmlFor=\"circle\">circle</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle-alt\" id=\"circle-alt\" />\n          <Label htmlFor=\"circle-alt\">circle-alt</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"line\" id=\"line\" />\n          <Label htmlFor=\"line\">line</Label>\n        </div>\n      </RadioGroup>\n      <Stepper variant={variant} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Sizes",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  StepperProps,\n  useStepper,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [size, setSize] = React.useState<StepperProps[\"size\"]>(\"md\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={size}\n        onValueChange={(value) => setSize(value as StepperProps[\"size\"])}\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"sm\" id=\"sm\" />\n          <Label htmlFor=\"sm\">sm</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"md\" id=\"md\" />\n          <Label htmlFor=\"md\">md</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"lg\" id=\"lg\" />\n          <Label htmlFor=\"lg\">lg</Label>\n        </div>\n      </RadioGroup>\n      <Stepper size={size} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Responsive",
                        "code_snippets": []
                    },
                    {
                        "subsection": "State",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper state=\"error\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isError,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button disabled={isError} size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Custom Icons",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\nimport { Building, Star, User } from \"lucide-react\";\n \nconst steps = [\n  { label: \"Step 1\", icon: User },\n  { label: \"Step 2\", icon: Building },\n  { label: \"Step 3\", icon: Star },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Clickable steps",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper\n        initialStep={0}\n        steps={steps}\n        onClickStep={(step, setStep) => {\n          // Add Toast\n          setStep(step);\n        }}\n      >\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Footer inside the step",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper orientation=\"vertical\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n              <StepButtons />\n            </Step>\n          );\n        })}\n        <FinalStep />\n      </Stepper>\n    </div>\n  );\n}\n \nconst StepButtons = () => {\n  const { nextStep, prevStep, isLastStep, isOptionalStep, isDisabledStep } =\n    useStepper();\n  return (\n    <div className=\"w-full flex gap-2\">\n      <Button\n        disabled={isDisabledStep}\n        onClick={prevStep}\n        size=\"sm\"\n        variant=\"secondary\"\n      >\n        Prev\n      </Button>\n      <Button size=\"sm\" onClick={nextStep}>\n        {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n      </Button>\n    </div>\n  );\n};\n \nconst FinalStep = () => {\n  const { hasCompletedAllSteps, resetSteps } = useStepper();\n \n  if (!hasCompletedAllSteps) {\n    return null;\n  }\n \n  return (\n    <>\n      <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n        <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n      </div>\n      <div className=\"w-full flex justify-end gap-2\">\n        <Button size=\"sm\" onClick={resetSteps}>\n          Reset\n        </Button>\n      </div>\n    </>\n  );\n};"
                        ]
                    },
                    {
                        "subsection": "Scroll tracking",
                        "code_snippets": []
                    },
                    {
                        "subsection": "With Forms",
                        "code_snippets": [
                            "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport { Input } from \"@camped-ui/input\";\nimport { Step, Stepper, useStepper } from \"@camped-ui/stepper\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n \nconst steps = [\n  { label: \"Step 1\", description: \"Description 1\" },\n  { label: \"Step 2\", description: \"Description 2\" },\n];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper variant=\"circle-alt\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          if (index === 0) {\n            return (\n              <Step key={stepProps.label} {...stepProps}>\n                <FirstStepForm />\n              </Step>\n            );\n          }\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <SecondStepForm />\n            </Step>\n          );\n        })}\n        <MyStepperFooter />\n      </Stepper>\n    </div>\n  );\n}\n \nconst FirstFormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n});\n \nfunction FirstStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof FirstFormSchema>>({\n    resolver: zodResolver(FirstFormSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof FirstFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nconst SecondFormSchema = z.object({\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n});\n \nfunction SecondStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof SecondFormSchema>>({\n    resolver: zodResolver(SecondFormSchema),\n    defaultValues: {\n      password: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof SecondFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormDescription>This is your private password.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nfunction StepperFormActions() {\n  const {\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n \n  return (\n    <div className=\"w-full flex justify-end gap-2\">\n      {hasCompletedAllSteps ? (\n        <Button size=\"sm\" onClick={resetSteps}>\n          Reset\n        </Button>\n      ) : (\n        <>\n          <Button\n            disabled={isDisabledStep}\n            onClick={prevStep}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            Prev\n          </Button>\n          <Button size=\"sm\">\n            {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n \nfunction MyStepperFooter() {\n  const { activeStep, resetSteps, steps } = useStepper();\n \n  if (activeStep !== steps.length) {\n    return null;\n  }\n \n  return (\n    <div className=\"flex items-center justify-end gap-2\">\n      <Button onClick={resetSteps}>Reset Stepper with Form</Button>\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Custom styles",
                        "code_snippets": [
                            "...\n  <Stepper\n    initialStep={0}\n    steps={steps}\n    styles={{\n      \"step-button-container\": cn(\n        \"text-purple-700 rounded-none\",\n        \"data-[current=true]:border-purple-500 data-[current=true]:bg-purple-50\",\n        \"data-[active=true]:bg-purple-500 data-[active=true]:border-purple-500\"\n      ),\n      \"horizontal-step\":\n        \"data-[completed=true]:[&:not(:last-child)]:after:bg-purple-500\",\n    }}\n    variables={{\n      \"--step-icon-size\": \"60px\",\n      \"--step-gap\": \"20px\",\n    }}\n  >\n  // Rest of the code\n  </Stepper>\n...",
                            "import { Button } from \"@camped-ui/button\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper\n        initialStep={0}\n        steps={steps}\n        styles={{\n          \"step-button-container\": cn(\n            \"text-purple-700 rounded-none\",\n            \"data-[current=true]:border-purple-500 data-[current=true]:bg-purple-50\",\n            \"data-[active=true]:bg-purple-500 data-[active=true]:border-purple-500\"\n          ),\n          \"horizontal-step\":\n            \"data-[completed=true]:[&:not(:last-child)]:after:bg-purple-500\",\n        }}\n        variables={{\n          \"--step-icon-size\": \"60px\",\n          \"--step-gap\": \"20px\",\n        }}\n      >\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n    isDisabledStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
                        ]
                    }
                ]
            },
            {
                "section": "API",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Stepper",
                        "code_snippets": []
                    },
                    {
                        "subsection": "Step",
                        "code_snippets": []
                    },
                    {
                        "subsection": "useStepper",
                        "code_snippets": [
                            "import { useStepper } from \"@camped-ui/stepper\"\n \nexport funcion UseStepperDemo() {\n  { ... } = useStepper();\n \n  return (\n    <div>\n      { ... }\n    </div>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Sticky Scroll Reveal",
        "url": "https://ui.camped.academy/docs/components/sticky-scroll-reveal",
        "page_title": "Sticky Scroll Reveal",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/sticky-scroll-reveal"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  ScrollContent,\n  StickyScroll,\n  StickyContent,\n  StickyScrollItem,\n} from \"@camped-ui/sticky-scroll-reveal\";",
                    "<StickyScroll content={content} />"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Switch",
        "url": "https://ui.camped.academy/docs/components/switch",
        "page_title": "Switch",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/switch"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Switch } from \"@camped-ui/switch\";",
                    "<Switch />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@camped-ui/form\"\nimport { Switch } from \"@camped-ui/switch\"\n \nconst FormSchema = z.object({\n  marketing_emails: z.boolean().default(false).optional(),\n  security_emails: z.boolean(),\n})\n \nexport function SwitchForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      security_emails: true,\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full space-y-6\">\n        <div>\n          <h3 className=\"mb-4 text-lg font-medium\">Email Notifications</h3>\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"marketing_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">\n                      Marketing emails\n                    </FormLabel>\n                    <FormDescription>\n                      Receive emails about new products, features, and more.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"security_emails\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Security emails</FormLabel>\n                    <FormDescription>\n                      Receive emails about your account security.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled\n                      aria-readonly\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Table",
        "url": "https://ui.camped.academy/docs/components/table",
        "page_title": "Table",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/table"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@camped-ui/table\";",
                    "<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>"
                ],
                "subsections": []
            },
            {
                "section": "Data Table",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Tabs",
        "url": "https://ui.camped.academy/docs/components/tabs",
        "page_title": "Tabs",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/tabs"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";",
                    "<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Toggle",
        "url": "https://ui.camped.academy/docs/components/toggle",
        "page_title": "Toggle",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/toggle"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Toggle } from \"@camped-ui/toggle\";",
                    "<Toggle>Toggle</Toggle>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Bold } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleDemo() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Bold className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Outline",
                        "code_snippets": [
                            "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleOutline() {\n  return (\n    <Toggle variant=\"outline\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Text",
                        "code_snippets": [
                            "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleWithText() {\n  return (\n    <Toggle aria-label=\"Toggle italic\">\n      <Italic className=\"mr-2 h-4 w-4\" />\n      Italic\n    </Toggle>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Small",
                        "code_snippets": [
                            "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleSm() {\n  return (\n    <Toggle size=\"sm\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Large",
                        "code_snippets": [
                            "import { Italic } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleLg() {\n  return (\n    <Toggle size=\"lg\" aria-label=\"Toggle italic\">\n      <Italic className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Disabled",
                        "code_snippets": [
                            "import { Underline } from \"lucide-react\"\n \nimport { Toggle } from \"@camped-ui/toggle\"\n \nexport function ToggleDisabled() {\n  return (\n    <Toggle aria-label=\"Toggle italic\" disabled>\n      <Underline className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Toggle Group",
        "url": "https://ui.camped.academy/docs/components/toggle-group",
        "page_title": "Toggle Group",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/toggle-group"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { ToggleGroup, ToggleGroupItem } from \"@camped-ui/toggle-group\";",
                    "<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Outline",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup variant=\"outline\" type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Single",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup type=\"single\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Small",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup size={\"sm\"} type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Large",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup size={\"lg\"} type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Disabled",
                        "code_snippets": [
                            "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup disabled type=\"single\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Tooltip",
        "url": "https://ui.camped.academy/docs/components/tooltip",
        "page_title": "Tooltip",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/tooltip"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@camped-ui/tooltip\";",
                    "<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger>Hover</TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Tree View",
        "url": "https://ui.camped.academy/docs/components/tree-view",
        "page_title": "Tree View",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/tree-view"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { TreeView } from \"@camped-ui/tree-view\";",
                    " <TreeView\n    elements={elements}\n    className=\"h-60\"\n    initialExpendedItems={[\"2\"]}\n    initialSelectedId=\"21\" \n  />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "\"use client\";\n \nimport { Tree, Folder, File, CollapseButton } from \"@camped-ui/tree-view\";\n \nconst TreeFileDemo = () => {\n  const elements = [\n    {\n      id: \"1\",\n      isSelectable: true,\n      name: \"src\",\n      children: [\n        {\n          id: \"2\",\n          isSelectable: true,\n          name: \"app.tsx\",\n        },\n        {\n          id: \"3\",\n          isSelectable: true,\n          name: \"components\",\n          children: [\n            {\n              id: \"20\",\n              isSelectable: true,\n              name: \"pages\",\n              children: [\n                {\n                  id: \"21\",\n                  isSelectable: true,\n                  name: \"interface.ts\",\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: \"6\",\n          isSelectable: true,\n          name: \"ui\",\n          children: [\n            {\n              id: \"7\",\n              isSelectable: true,\n              name: \"carousel.tsx\",\n            },\n          ],\n        },\n      ],\n    },\n  ];\n  return (\n    <Tree\n      className=\"rounded-md h-60 bg-background overflow-hidden p-2\"\n      initialSelectedId=\"21\"\n      elements={elements}\n    >\n      <Folder element=\"src\" value=\"1\">\n        <File value=\"2\">\n          <p> app.tsx </p>\n        </File>\n        <Folder value=\"3\" element=\"components\">\n          <Folder value=\"20\" element=\"pages\">\n            <File value=\"21\">\n              <p>interface.ts</p>\n            </File>\n          </Folder>\n        </Folder>\n        <Folder value=\"6\" element=\"ui\">\n          <File value=\"7\">\n            <p>carousel.tsx</p>\n          </File>\n        </Folder>\n      </Folder>\n      <CollapseButton elements={elements} />\n    </Tree>\n  );\n};\n \nexport TreeFileDemo;"
                        ]
                    },
                    {
                        "subsection": "With Build-in select",
                        "code_snippets": [
                            "import { TreeView } from \"@camped-ui/tree-view\";\n \nconst TreeViewBuiltinSelect = () => {\n  const elements = [\n    {\n      id: \"1\",\n      name: \"Element 1\",\n      children: [\n        {\n          id: \"1.1\",\n          name: \"Element 1.1\",\n          children: [\n            {\n              id: \"1.1.1\",\n              name: \"Element 1.1.1\",\n            },\n            {\n              id: \"1.1.2\",\n              name: \"Element 1.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"1.2\",\n          name: \"Element 1.2\",\n        },\n      ],\n    },\n    {\n      id: \"2\",\n      name: \"Element 2\",\n      children: [\n        {\n          id: \"2.1\",\n          name: \"Element 2.1\",\n          children: [\n            {\n              id: \"2.1.1\",\n              name: \"Element 2.1.1\",\n            },\n            {\n              id: \"2.1.2\",\n              name: \"Element 2.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"2.2\",\n          name: \"Element 2.2\",\n        },\n      ],\n    },\n    {\n      id: \"3\",\n      name: \"Element 3\",\n    },\n  ];\n \n  return (\n    <TreeView\n      elements={elements}\n      className=\"h-60\"\n      initialExpendedItems={[\"2\"]}\n      initialSelectedId=\"1.1.2\"\n    />\n  );\n};\n \nexport TreeViewBuiltinSelect;"
                        ]
                    },
                    {
                        "subsection": "With Build-in expand",
                        "code_snippets": [
                            "import { TreeView } from \"@camped-ui/tree-view\";\n \nconst TreeViewBuiltinExpand = () => {\n  const elements = [\n    {\n      id: \"1\",\n      name: \"Element 1\",\n      children: [\n        {\n          id: \"1.1\",\n          name: \"Element 1.1\",\n          children: [\n            {\n              id: \"1.1.1\",\n              name: \"Element 1.1.1\",\n            },\n            {\n              id: \"1.1.2\",\n              name: \"Element 1.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"1.2\",\n          name: \"Element 1.2\",\n        },\n      ],\n    },\n    {\n      id: \"2\",\n      name: \"Element 2\",\n      children: [\n        {\n          id: \"2.1\",\n          name: \"Element 2.1\",\n        },\n        {\n          id: \"2.2\",\n          name: \"Element 2.2\",\n        },\n      ],\n    },\n    {\n      id: \"3\",\n      name: \"Element 3\",\n    },\n  ];\n \n  return (\n    <TreeView className=\"bg-background h-60\" elements={elements} expandAll />\n  );\n};\n \nexport TreeViewBuiltinExpand;"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Inputs",
        "url": "https://ui.camped.academy/docs/components/inputs",
        "page_title": "404",
        "sections": [
            {
                "section": "This page could not be found.",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Input",
        "url": "https://ui.camped.academy/docs/components/input",
        "page_title": "Input",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/input"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Input } from \"@camped-ui/input\";",
                    "<Input />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Input } from \"@camped-ui/input\"\n \nexport function InputDemo() {\n  return <Input type=\"email\" placeholder=\"Email\" />\n}"
                        ]
                    },
                    {
                        "subsection": "File",
                        "code_snippets": [
                            "import { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function InputFile() {\n  return (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"picture\">Picture</Label>\n      <Input id=\"picture\" type=\"file\" />\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Disabled",
                        "code_snippets": [
                            "import { Input } from \"@camped-ui/input\"\n \nexport function InputDisabled() {\n  return <Input disabled type=\"email\" placeholder=\"Email\" />\n}"
                        ]
                    },
                    {
                        "subsection": "With Label",
                        "code_snippets": [
                            "import { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function InputWithLabel() {\n  return (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor=\"email\">Email</Label>\n      <Input type=\"email\" id=\"email\" placeholder=\"Email\" />\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Button",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\n \nexport function InputWithButton() {\n  return (\n    <div className=\"flex w-full max-w-sm items-center space-x-2\">\n      <Input type=\"email\" placeholder=\"Email\" />\n      <Button type=\"submit\">Subscribe</Button>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Input } from \"@camped-ui/input\"\n \nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function InputForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Input OTP",
        "url": "https://ui.camped.academy/docs/components/input-otp",
        "page_title": "Input OTP",
        "sections": [
            {
                "section": "About",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/input-otp",
                    "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n}"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"",
                    "<InputOTP\n  maxLength={6}\n  render={({ slots }) => (\n    <>\n      <InputOTPGroup>\n        {slots.slice(0, 3).map((slot, index) => (\n          <InputOTPSlot key={index} {...slot} />\n        ))}{\" \"}\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        {slots.slice(3).map((slot, index) => (\n          <InputOTPSlot key={index} {...slot} />\n        ))}\n      </InputOTPGroup>\n    </>\n  )}\n/>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Pattern",
                        "code_snippets": [
                            "import { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPPattern() {\n  return (\n    <InputOTP\n      maxLength={6}\n      pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n      render={({ slots }) => (\n        <InputOTPGroup>\n          {slots.map((slot, index) => (\n            <InputOTPSlot key={index} {...slot} />\n          ))}{\" \"}\n        </InputOTPGroup>\n      )}\n    />\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Separator",
                        "code_snippets": [
                            "import React from \"react\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPWithSeparator() {\n  return (\n    <InputOTP\n      maxLength={6}\n      render={({ slots }) => (\n        <InputOTPGroup className=\"gap-2\">\n          {slots.map((slot, index) => (\n            <React.Fragment key={index}>\n              <InputOTPSlot className=\"rounded-md border\" {...slot} />\n              {index !== slots.length - 1 && <InputOTPSeparator />}\n            </React.Fragment>\n          ))}{\" \"}\n        </InputOTPGroup>\n      )}\n    />\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Controlled",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\n \nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@camped-ui/input-otp\"\n \nexport function InputOTPControlled() {\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <div className=\"space-y-2\">\n      <InputOTP\n        maxLength={6}\n        value={value}\n        onChange={(value) => setValue(value)}\n        render={({ slots }) => (\n          <InputOTPGroup>\n            {slots.map((slot, index) => (\n              <InputOTPSlot key={index} {...slot} />\n            ))}{\" \"}\n          </InputOTPGroup>\n        )}\n      />\n      <div className=\"text-center text-sm\">\n        {value === \"\" ? (\n          <>Enter your one-time password.</>\n        ) : (\n          <>You entered: {value}</>\n        )}\n      </div>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Toggle",
                        "code_snippets": [
                            "\"use client\";\n \nimport { OtpStyledInput } from \"@camped-ui/input-otp\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"@camped-ui/button\";\nimport { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\n \nconst INPUT_NUM = 4;\n \nconst form = z.object({\n  otp: z.string().min(INPUT_NUM, \"Password confirmation is required\"),\n});\n \ntype Form = z.infer<typeof form>;\n \nenum OtpInputType {\n  password = \"password\",\n  text = \"text\",\n}\n \nconst OTPInputToggle = () => {\n  const [isPassword, setIsPassword] = useState<OtpInputType>(\n    OtpInputType.password\n  );\n  const multiForm = useForm<Form>({\n    resolver: zodResolver(form),\n    defaultValues: {\n      otp: \"\",\n    },\n  });\n \n  const onSubmit = (data: Form) => {\n// Add Toast\n  };\n \n  return (\n    <Form {...multiForm}>\n      <form\n        className=\"grid gap-2 bg-background p-4 rounded-md shadow-md\"\n        onSubmit={multiForm.handleSubmit(onSubmit)}\n      >\n        <FormField\n          control={multiForm.control}\n          name=\"otp\"\n          render={({ field }) => (\n            <FormControl>\n              <>\n                <FormLabel htmlFor={field.name}>\n                  Enter your confirmation password\n                </FormLabel>\n                <FormItem className=\"flex space-y-0 gap-x-2\">\n                  <OtpStyledInput\n                    numInputs={INPUT_NUM}\n                    inputType={isPassword}\n                    {...field}\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"size-9\"\n                    type=\"button\"\n                    onClick={() => {\n                      setIsPassword(\n                        isPassword === OtpInputType.password\n                          ? OtpInputType.text\n                          : OtpInputType.password\n                      );\n                    }}\n                  >\n                    {isPassword === OtpInputType.password ? (\n                      <EyeClosedIcon />\n                    ) : (\n                      <EyeOpenIcon />\n                    )}\n                    <span className=\"sr-only\">{isPassword}</span>\n                  </Button>\n                </FormItem>\n                <FormMessage />\n              </>\n            </FormControl>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-fit\">\n          Submit\n        </Button>\n      </form>\n    </Form>\n  );\n};\n \nexport OTPInputToggle;"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\";\n \nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@camped-ui/input-otp\";\n \nconst FormSchema = z.object({\n  pin: z.string().min(6, {\n    message: \"Your one-time password must be 6 characters.\",\n  }),\n});\n \nexport function InputOTPForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      pin: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"pin\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>One-Time Password</FormLabel>\n              <FormControl>\n                <InputOTP\n                  maxLength={6}\n                  render={({ slots }) => (\n                    <InputOTPGroup>\n                      {slots.map((slot, index) => (\n                        <InputOTPSlot key={index} {...slot} />\n                      ))}{\" \"}\n                    </InputOTPGroup>\n                  )}\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                Please enter the one-time password sent to your phone.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n \n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Password Input",
        "url": "https://ui.camped.academy/docs/components/password-input",
        "page_title": "Password Input",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/password-input"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { PasswordInput } from \"@camped-ui/password-input\";",
                    "<PasswordInput placeholder=\"********\" />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { PasswordInput } from \"@camped-ui/password-input\"\n \nexport function InputDemo() {\n  return <PasswordInput placeholder=\"********\"  />\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Multi Select",
        "url": "https://ui.camped.academy/docs/components/multi-select",
        "page_title": "Multiselect",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/multi-select"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "\"use client\";\n \nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { useState } from \"react\";\n \nconst MultiSelectState = () => {\n  const [value, setValue] = useState<string[]>([]);\n \n  return (\n    <MultiSelector values={value} onValuesChange={setValue}>\n      <MultiSelectorTrigger>\n        <MultiSelectorInput placeholder=\"Select items\" />\n      </MultiSelectorTrigger>\n      <MultiSelectorContent>\n        <MultiSelectorList>\n          <MultiSelectorItem value=\"1\">Item 1</MultiSelectorItem>\n          <MultiSelectorItem value=\"2\">Item 2</MultiSelectorItem>\n          <MultiSelectorItem value=\"3\">Item 3</MultiSelectorItem>\n        </MultiSelectorList>\n      </MultiSelectorContent>\n    </MultiSelector>\n  );\n};\n \nexport MultiSelectState;"
                        ]
                    },
                    {
                        "subsection": "Multi-Select with Limit",
                        "code_snippets": [
                            "\"use client\";\n \nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { useState } from \"react\";\n \nconst MultiSelectWithLimit = () => {\n  const [value, setValue] = useState<string[]>([]);\n \n  return (\n    <MultiSelector values={value} onValuesChange={setValue} limit={3}>\n      <MultiSelectorTrigger>\n        <MultiSelectorInput placeholder=\"Select items\" />\n      </MultiSelectorTrigger>\n      <MultiSelectorContent>\n        <MultiSelectorList>\n          <MultiSelectorItem value=\"Item 1\">Item 1</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 2\">Item 2</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 3\">Item 3</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 4\">Item 4</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 5\">Item 5</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 6\">Item 6</MultiSelectorItem>\n        </MultiSelectorList>\n      </MultiSelectorContent>\n    </MultiSelector>\n  );\n};\n \nexport MultiSelectWithLimit;"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport Image from \"next/image\";\nimport { useForm } from \"react-hook-form\";\nimport z from \"zod\";\n \nconst form = z.object({\n  value: z.array(z.string()).nonempty(\"Please select at least one person\"),\n});\n \ntype Form = z.infer<typeof form>;\n \nconst users = [\n  {\n    name: \"Outreach\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/636f89816b/outreach-tab-icon.svg\",\n  },\n  {\n    name: \"MailEd\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/395f664471/mail-tab-icon.svg\",\n  },\n  {\n    name: \"Aceprep\",\n    picture:\n      \"https://a.storyblok.com/f/267385/512x512/f08e525263/aceprep-tab-icon.svg\",\n  },\n];\n \nconst MultiSelectZod = () => {\n  const multiForm = useForm<Form>({\n    resolver: zodResolver(form),\n    defaultValues: form.parse({ value: [users[0].name] }),\n  });\n \n  const onSubmit = (data: Form) => {\n// Add Toast\n  };\n \n  return (\n    <Form {...multiForm}>\n      <form\n        onSubmit={multiForm.handleSubmit(onSubmit)}\n        className=\"space-y-3 grid gap-3 w-full\"\n      >\n        <FormField\n          control={multiForm.control}\n          name=\"value\"\n          render={({ field }) => (\n            <FormItem className=\"w-full\">\n              <FormLabel>Interesed Products</FormLabel>\n              <MultiSelector\n                onValuesChange={field.onChange}\n                values={field.value}\n              >\n                <MultiSelectorTrigger>\n                  <MultiSelectorInput placeholder=\"Select people to invite\" />\n                </MultiSelectorTrigger>\n                <MultiSelectorContent>\n                  <MultiSelectorList>\n                    {users.map((user) => (\n                      <MultiSelectorItem key={user.name} value={user.name}>\n                        <div className=\"flex items-center space-x-2\">\n                          <Image\n                            src={user.picture}\n                            alt={user.name}\n                            width={32}\n                            height={32}\n                            className=\"w-8 h-8 rounded-full\"\n                          />\n                          <span>{user.name}</span>\n                        </div>\n                      </MultiSelectorItem>\n                    ))}\n                  </MultiSelectorList>\n                </MultiSelectorContent>\n              </MultiSelector>\n              <FormDescription>\n                Select people to invite to this event\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n};\n \nexport MultiSelectZod;"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Select",
        "url": "https://ui.camped.academy/docs/components/select",
        "page_title": "Select",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/select"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\";",
                    "<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Theme\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectItem value=\"light\">Light</SelectItem>\n    <SelectItem value=\"dark\">Dark</SelectItem>\n    <SelectItem value=\"system\">System</SelectItem>\n  </SelectContent>\n</Select>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Scrollable",
                        "code_snippets": [
                            "import * as React from \"react\"\n \nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nexport function SelectScrollable() {\n  return (\n    <Select>\n      <SelectTrigger className=\"w-[280px]\">\n        <SelectValue placeholder=\"Select a timezone\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>North America</SelectLabel>\n          <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n          <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n          <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n          <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n          <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n          <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Europe & Africa</SelectLabel>\n          <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n          <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n          <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n          <SelectItem value=\"west\">\n            Western European Summer Time (WEST)\n          </SelectItem>\n          <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n          <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Asia</SelectLabel>\n          <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n          <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n          <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n          <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n          <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n          <SelectItem value=\"ist_indonesia\">\n            Indonesia Central Standard Time (WITA)\n          </SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Australia & Pacific</SelectLabel>\n          <SelectItem value=\"awst\">\n            Australian Western Standard Time (AWST)\n          </SelectItem>\n          <SelectItem value=\"acst\">\n            Australian Central Standard Time (ACST)\n          </SelectItem>\n          <SelectItem value=\"aest\">\n            Australian Eastern Standard Time (AEST)\n          </SelectItem>\n          <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n          <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>South America</SelectLabel>\n          <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n          <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n          <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n          <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nconst FormSchema = z.object({\n  email: z\n    .string({\n      required_error: \"Please select an email to display.\",\n    })\n    .email(),\n})\n \nexport function SelectForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a verified email to display\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"m@example.com\">m@example.com</SelectItem>\n                  <SelectItem value=\"m@google.com\">m@google.com</SelectItem>\n                  <SelectItem value=\"m@support.com\">m@support.com</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                You can manage email addresses in your{\" \"}\n                <Link href=\"/examples/forms\">email settings</Link>.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Textarea",
        "url": "https://ui.camped.academy/docs/components/textarea",
        "page_title": "Textarea",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/textarea"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Textarea } from \"@camped-ui/textarea\";",
                    "<Textarea />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "import { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaDemo() {\n  return <Textarea placeholder=\"Type your message here.\" />\n}"
                        ]
                    },
                    {
                        "subsection": "Disabled",
                        "code_snippets": [
                            "import { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaDisabled() {\n  return <Textarea placeholder=\"Type your message here.\" disabled />\n}"
                        ]
                    },
                    {
                        "subsection": "With Label",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithLabel() {\n  return (\n    <div className=\"grid w-full gap-1.5\">\n      <Label htmlFor=\"message\">Your message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message\" />\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Text",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithText() {\n  return (\n    <div className=\"grid w-full gap-1.5\">\n      <Label htmlFor=\"message-2\">Your Message</Label>\n      <Textarea placeholder=\"Type your message here.\" id=\"message-2\" />\n      <p className=\"text-sm text-muted-foreground\">\n        Your message will be copied to the support team.\n      </p>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Button",
                        "code_snippets": [
                            "import { Button } from \"@camped-ui/button\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaWithButton() {\n  return (\n    <div className=\"grid w-full gap-2\">\n      <Textarea placeholder=\"Type your message here.\" />\n      <Button>Send message</Button>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { Textarea } from \"@camped-ui/textarea\"\n \nconst FormSchema = z.object({\n  bio: z\n    .string()\n    .min(10, {\n      message: \"Bio must be at least 10 characters.\",\n    })\n    .max(160, {\n      message: \"Bio must not be longer than 30 characters.\",\n    }),\n})\n \nexport function TextareaForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"bio\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Bio</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Tell us a little bit about yourself\"\n                  className=\"resize-none\"\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                You can <span>@mention</span> other users and organizations.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Tag Input",
        "url": "https://ui.camped.academy/docs/components/tag-input",
        "page_title": "Tag Input",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/tag-input"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { TagType, TagInput } from \"@camped-ui/tag-input\";"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Variant",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputVariant() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [variantTags, setVariantTags] = React.useState<TagType[]>(tags);\n \n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"primary\">Primary</TabsTrigger>\n        <TabsTrigger value=\"destructive\">Destructive</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"primary\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          variant=\"primary\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"destructive\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={variantTags}\n          variant=\"destructive\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setVariantTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Animation",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAnimation() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [animationTags, setAnimationTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"none\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"none\">None</TabsTrigger>\n        <TabsTrigger value=\"bounce\">Bounce</TabsTrigger>\n        <TabsTrigger value=\"fade-in\">Fade-in</TabsTrigger>\n        <TabsTrigger value=\"slide-in\">Slide-in</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"none\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"none\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"bounce\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"bounce\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"fade-in\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"fadeIn\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"slide-in\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={animationTags}\n          animation=\"slideIn\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setAnimationTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Border",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputBorder() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [borderTags, setBorderTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"none\">No border</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"default\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"none\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"none\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Interaction",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputInteraction() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [interactionTags, setInteractionTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"clickable\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"clickable\">Clickable</TabsTrigger>\n        <TabsTrigger value=\"non-clickable\">Non-Clickable</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"clickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"non-clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"nonClickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Shape",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputShape() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [shapeTags, setShapeTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"square\">Square</TabsTrigger>\n        <TabsTrigger value=\"rounded\">Rounded</TabsTrigger>\n        <TabsTrigger value=\"pill\">Pill</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"default\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"square\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"square\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"rounded\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"rounded\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"pill\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={shapeTags}\n          shape=\"pill\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setShapeTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Size",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputVariant() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [sizeTags, setSizeTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"small\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"small\">Small</TabsTrigger>\n        <TabsTrigger value=\"medium\">Medium</TabsTrigger>\n        <TabsTrigger value=\"large\">Large</TabsTrigger>\n        <TabsTrigger value=\"x-large\">X-Large</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"small\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"sm\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"medium\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"lg\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"x-large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"xl\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "TextCase",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTextcase() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [textCaseTags, setTextCaseTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"capitalize\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"capitalize\">Capitalize</TabsTrigger>\n        <TabsTrigger value=\"uppercase\">Uppercase</TabsTrigger>\n        <TabsTrigger value=\"lowercase\">Lowercase</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"capitalize\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"capitalize\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"uppercase\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"uppercase\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"lowercase\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textCaseTags}\n          textCase=\"lowercase\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextCaseTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "TextStyles",
                        "code_snippets": [
                            "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTextstyles() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [textStyleTags, setTextStyleTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"normal\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"normal\">Normal</TabsTrigger>\n        <TabsTrigger value=\"bold\">Bold</TabsTrigger>\n        <TabsTrigger value=\"italic\">Italic</TabsTrigger>\n        <TabsTrigger value=\"underline\">Underline</TabsTrigger>\n        <TabsTrigger value=\"line-through\">Line through</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"normal\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"normal\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"bold\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"bold\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"italic\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"italic\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"underline\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"underline\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"line-through\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={textStyleTags}\n          textStyle=\"lineThrough\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setTextStyleTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    }
                ]
            },
            {
                "section": "Props",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Autocomplete",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAutocomplete() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const autoCompleteOptions = [\n    ...tags,\n    { id: uuid(), text: \"Food\" },\n    { id: uuid(), text: \"Movies\" },\n    { id: uuid(), text: \"Art\" },\n    { id: uuid(), text: \"Books\" },\n  ];\n  const [autocompleteTags, setAutocompleteTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={autocompleteTags}\n        enableAutocomplete\n        restrictTagsToAutocompleteOptions\n        autocompleteOptions={autoCompleteOptions}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAutocompleteTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Max Tag",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputMaxTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [maxTags, setMaxTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={maxTags}\n        maxTags={5}\n        showCount\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setMaxTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Custom tag render",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport { CheckCircle } from \"lucide-react\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputCustomTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [customRenderTags, setCustomRenderTags] =\n    React.useState<TagType[]>(tags);\n  const renderCustomTag = (tag: TagType) => {\n    return (\n      <div\n        key={tag.id}\n        className={`flex items-center gap-2 p-2 rounded bg-blue-500\n          }`}\n      >\n        <CheckCircle size={16} className=\"text-white\" />\n        <span className=\"text-white text-sm mr-2\">{tag.text}</span>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={customRenderTags}\n        customTagRenderer={renderCustomTag}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setCustomRenderTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Truncate tag",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputTruncateTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [truncateTags, setTruncateTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={truncateTags}\n        truncate={4}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setTruncateTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Clear all tags",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputClearTag() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [clearAllTags, setClearAllTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={clearAllTags}\n        clearAll\n        onClearAll={() => {\n          setClearAllTags([]);\n        }}\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setClearAllTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Draggable",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputDraggableTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [allowDraggableTags, setAllowDraggableTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={allowDraggableTags}\n        draggable\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAllowDraggableTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Tag Popover",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputPopoverTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [usePopoverTags, setUsePopoverTags] = React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={usePopoverTags}\n        usePopoverForTags\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setUsePopoverTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Allow Duplicate tags",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputAllowDuplicatesTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Travel\" },\n    { id: uuid(), text: \"Sports\" },\n  ];\n \n  const [allowDuplicatesTags, setAllowDuplicatesTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={allowDuplicatesTags}\n        allowDuplicates\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAllowDuplicatesTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Direction tags",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputDirectionTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [directionTags, setDirectionTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"row\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"row\">Row</TabsTrigger>\n        <TabsTrigger value=\"column\">Column</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"row\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={directionTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setDirectionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"column\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={directionTags}\n          size=\"md\"\n          direction=\"column\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setDirectionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Input field position",
                        "code_snippets": [
                            "import { Label } from \"@camped-ui/label\";\nimport { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputFieldPosition() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [inputFieldPositionTags, setInputFieldPositionTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"bottom\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"bottom\">Bottom</TabsTrigger>\n        <TabsTrigger value=\"top\">Top</TabsTrigger>\n        <TabsTrigger value=\"inline\">Inline</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"bottom\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"top\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          inputFieldPostion=\"top\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"inline\" className=\"space-y-2\">\n        <Label htmlFor=\"\">Topics</Label>\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={inputFieldPositionTags}\n          size=\"md\"\n          inputFieldPostion=\"inline\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInputFieldPositionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
                        ]
                    }
                ]
            },
            {
                "section": "Options",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Calendar",
        "url": "https://ui.camped.academy/docs/components/calendar",
        "page_title": "Calendar",
        "sections": [
            {
                "section": "About",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/calendar"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Calendar } from \"@camped-ui/calendar\";",
                    "const [date, setDate] = React.useState<Date | undefined>(new Date());\n \nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n);"
                ],
                "subsections": []
            },
            {
                "section": "Date Picker",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst FormSchema = z.object({\n  dob: z.date({\n    required_error: \"A date of birth is required.\",\n  }),\n})\n \nexport function CalendarForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Checkbox",
        "url": "https://ui.camped.academy/docs/components/checkbox",
        "page_title": "Checkbox",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/checkbox"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Checkbox } from \"@camped-ui/checkbox\";",
                    "<Checkbox />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "With text",
                        "code_snippets": [
                            "\"use client\"\n \nimport { Checkbox } from \"@camped-ui/checkbox\"\n \nexport function CheckboxWithText() {\n  return (\n    <div className=\"items-top flex space-x-2\">\n      <Checkbox id=\"terms1\" />\n      <div className=\"grid gap-1.5 leading-none\">\n        <label\n          htmlFor=\"terms1\"\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n        >\n          Accept terms and conditions\n        </label>\n        <p className=\"text-sm text-muted-foreground\">\n          You agree to our Terms of Service and Privacy Policy.\n        </p>\n      </div>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Disabled",
                        "code_snippets": [
                            "import { Checkbox } from \"@camped-ui/checkbox\"\n \nexport function CheckboxDisabled() {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox id=\"terms2\" disabled />\n      <label\n        htmlFor=\"terms2\"\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n      >\n        Accept terms and conditions\n      </label>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Checkbox } from \"@camped-ui/checkbox\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@camped-ui/form\"\n \nconst FormSchema = z.object({\n  mobile: z.boolean().default(false).optional(),\n})\n \nexport function CheckboxReactHookFormSingle() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      mobile: true,\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"mobile\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel>\n                  Use different settings for my mobile devices\n                </FormLabel>\n                <FormDescription>\n                  You can manage your mobile notifications in the{\" \"}\n                  <Link href=\"/examples/forms\">mobile settings</Link> page.\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}",
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Checkbox } from \"@camped-ui/checkbox\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\n \nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const\n \nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n})\n \nexport function CheckboxReactHookFormMultiple() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"items\"\n          render={() => (\n            <FormItem>\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-base\">Sidebar</FormLabel>\n                <FormDescription>\n                  Select the items you want to display in the sidebar.\n                </FormDescription>\n              </div>\n              {items.map((item) => (\n                <FormField\n                  key={item.id}\n                  control={form.control}\n                  name=\"items\"\n                  render={({ field }) => {\n                    return (\n                      <FormItem\n                        key={item.id}\n                        className=\"flex flex-row items-start space-x-3 space-y-0\"\n                      >\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value?.includes(item.id)}\n                            onCheckedChange={(checked) => {\n                              return checked\n                                ? field.onChange([...field.value, item.id])\n                                : field.onChange(\n                                    field.value?.filter(\n                                      (value) => value !== item.id\n                                    )\n                                  )\n                            }}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"font-normal\">\n                          {item.label}\n                        </FormLabel>\n                      </FormItem>\n                    )\n                  }}\n                />\n              ))}\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Combobox",
        "url": "https://ui.camped.academy/docs/components/combobox",
        "page_title": "Combobox",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "\"use client\";\n \nimport * as React from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n \nimport { cn } from \"@camped-ui/lib\";\nimport { Button } from \"@camped-ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n];\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue);\n                  setOpen(false);\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Combobox",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue)\n                  setOpen(false)\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Popover",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport {\n  ArrowUpCircle,\n  CheckCircle2,\n  Circle,\n  HelpCircle,\n  LucideIcon,\n  XCircle,\n} from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@camped-ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \ntype Status = {\n  value: string\n  label: string\n  icon: LucideIcon\n}\n \nconst statuses: Status[] = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    icon: HelpCircle,\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    icon: Circle,\n  },\n  {\n    value: \"in progress\",\n    label: \"In Progress\",\n    icon: ArrowUpCircle,\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    icon: CheckCircle2,\n  },\n  {\n    value: \"canceled\",\n    label: \"Canceled\",\n    icon: XCircle,\n  },\n]\n \nexport function ComboboxPopover() {\n  const [open, setOpen] = React.useState(false)\n  const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(\n    null\n  )\n \n  return (\n    <div className=\"flex items-center space-x-4\">\n      <p className=\"text-sm text-muted-foreground\">Status</p>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-[150px] justify-start\"\n          >\n            {selectedStatus ? (\n              <>\n                <selectedStatus.icon className=\"mr-2 h-4 w-4 shrink-0\" />\n                {selectedStatus.label}\n              </>\n            ) : (\n              <>+ Set status</>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n          <Command>\n            <CommandInput placeholder=\"Change status...\" />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup>\n                {statuses.map((status) => (\n                  <CommandItem\n                    key={status.value}\n                    value={status.value}\n                    onSelect={(value) => {\n                      setSelectedStatus(\n                        statuses.find((priority) => priority.value === value) ||\n                          null\n                      )\n                      setOpen(false)\n                    }}\n                  >\n                    <status.icon\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        status.value === selectedStatus?.value\n                          ? \"opacity-100\"\n                          : \"opacity-40\"\n                      )}\n                    />\n                    <span>{status.label}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Dropdown menu",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { Calendar, MoreHorizontal, Tags, Trash, User } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@camped-ui/command\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\"\n \nconst labels = [\n  \"feature\",\n  \"bug\",\n  \"enhancement\",\n  \"documentation\",\n  \"design\",\n  \"question\",\n  \"maintenance\",\n]\n \nexport function ComboboxDropdownMenu() {\n  const [label, setLabel] = React.useState(\"feature\")\n  const [open, setOpen] = React.useState(false)\n \n  return (\n    <div className=\"flex w-full flex-col items-start justify-between rounded-md border px-4 py-3 sm:flex-row sm:items-center\">\n      <p className=\"text-sm font-medium leading-none\">\n        <span className=\"mr-2 rounded-lg bg-primary px-2 py-1 text-xs text-primary-foreground\">\n          {label}\n        </span>\n        <span className=\"text-muted-foreground\">Create a new project</span>\n      </p>\n      <DropdownMenu open={open} onOpenChange={setOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\">\n            <MoreHorizontal />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              Assign to...\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Set due date...\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuSub>\n              <DropdownMenuSubTrigger>\n                <Tags className=\"mr-2 h-4 w-4\" />\n                Apply label\n              </DropdownMenuSubTrigger>\n              <DropdownMenuSubContent className=\"p-0\">\n                <Command>\n                  <CommandInput\n                    placeholder=\"Filter label...\"\n                    autoFocus={true}\n                  />\n                  <CommandList>\n                    <CommandEmpty>No label found.</CommandEmpty>\n                    <CommandGroup>\n                      {labels.map((label) => (\n                        <CommandItem\n                          key={label}\n                          value={label}\n                          onSelect={(value) => {\n                            setLabel(value)\n                            setOpen(false)\n                          }}\n                        >\n                          {label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </DropdownMenuSubContent>\n            </DropdownMenuSub>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-red-600\">\n              <Trash className=\"mr-2 h-4 w-4\" />\n              Delete\n              <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst languages = [\n  { label: \"English\", value: \"en\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Portuguese\", value: \"pt\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Korean\", value: \"ko\" },\n  { label: \"Chinese\", value: \"zh\" },\n] as const\n \nconst FormSchema = z.object({\n  language: z.string({\n    required_error: \"Please select a language.\",\n  }),\n})\n \nexport function ComboboxForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"language\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Language</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      className={cn(\n                        \"w-[200px] justify-between\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value\n                        ? languages.find(\n                            (language) => language.value === field.value\n                          )?.label\n                        : \"Select language\"}\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-[200px] p-0\">\n                  <Command>\n                    <CommandInput placeholder=\"Search language...\" />\n                    <CommandEmpty>No language found.</CommandEmpty>\n                    <CommandGroup>\n                      {languages.map((language) => (\n                        <CommandItem\n                          value={language.label}\n                          key={language.value}\n                          onSelect={() => {\n                            form.setValue(\"language\", language.value)\n                          }}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              language.value === field.value\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                            )}\n                          />\n                          {language.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                This is the language that will be used in the dashboard.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Date Picker",
        "url": "https://ui.camped.academy/docs/components/date-picker",
        "page_title": "Date Picker",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "\"use client\";\n \nimport * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\n \nimport { cn } from \"@camped-ui/lib\";\nimport { Button } from \"@camped-ui/button\";\nimport { Calendar } from \"@camped-ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";\n \nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>();\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Date Picker",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Date Range Picker",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { addDays, format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\nimport { DateRange } from \"react-day-picker\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nexport function DatePickerWithRange({\n  className,\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const [date, setDate] = React.useState<DateRange | undefined>({\n    from: new Date(2022, 0, 20),\n    to: addDays(new Date(2022, 0, 20), 20),\n  })\n \n  return (\n    <div className={cn(\"grid gap-2\", className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant={\"outline\"}\n            className={cn(\n              \"w-[300px] justify-start text-left font-normal\",\n              !date && \"text-muted-foreground\"\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, \"LLL dd, y\")} -{\" \"}\n                  {format(date.to, \"LLL dd, y\")}\n                </>\n              ) : (\n                format(date.from, \"LLL dd, y\")\n              )\n            ) : (\n              <span>Pick a date</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={setDate}\n            numberOfMonths={2}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "With Presets",
                        "code_snippets": [
                            "\"use client\"\n \nimport * as React from \"react\"\nimport { addDays, format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@camped-ui/select\"\n \nexport function DatePickerWithPresets() {\n  const [date, setDate] = React.useState<Date>()\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"flex w-auto flex-col space-y-2 p-2\">\n        <Select\n          onValueChange={(value) =>\n            setDate(addDays(new Date(), parseInt(value)))\n          }\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent position=\"popper\">\n            <SelectItem value=\"0\">Today</SelectItem>\n            <SelectItem value=\"1\">Tomorrow</SelectItem>\n            <SelectItem value=\"3\">In 3 days</SelectItem>\n            <SelectItem value=\"7\">In a week</SelectItem>\n          </SelectContent>\n        </Select>\n        <div className=\"rounded-md border\">\n          <Calendar mode=\"single\" selected={date} onSelect={setDate} />\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport { Calendar } from \"@camped-ui/calendar\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst FormSchema = z.object({\n  dob: z.date({\n    required_error: \"A date of birth is required.\",\n  }),\n})\n \nexport function DatePickerForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"dob\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Date of birth</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-[240px] pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={field.onChange}\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"1900-01-01\")\n                    }\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                Your date of birth is used to calculate your age.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Radio Group",
        "url": "https://ui.camped.academy/docs/components/radio-group",
        "page_title": "Radio Group",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/radio-group"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";",
                    "<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Form",
                        "code_snippets": [
                            "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\"\n \nconst FormSchema = z.object({\n  type: z.enum([\"all\", \"mentions\", \"none\"], {\n    required_error: \"You need to select a notification type.\",\n  }),\n})\n \nexport function RadioGroupForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-3\">\n              <FormLabel>Notify me about...</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className=\"flex flex-col space-y-1\"\n                >\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"all\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      All new messages\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"mentions\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      Direct messages and mentions\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"none\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">Nothing</FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "File Upload",
        "url": "https://ui.camped.academy/docs/components/file-upload",
        "page_title": "404",
        "sections": [
            {
                "section": "This page could not be found.",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Text",
        "url": "https://ui.camped.academy/docs/components/text",
        "page_title": "Text",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/text"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "h1",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH1() {\n  return <Text variant=\"h1\">Taxing Laughter: The Joke Tax Chronicles</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h2",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH2() {\n  return <Text variant=\"h2\">The People of the Kingdom</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h3",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH3() {\n  return <Text variant=\"h3\">The Joke Tax</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h4",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH4() {\n  return <Text variant=\"h4\">People stopped telling jokes</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h5",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH5() {\n  return <Text variant=\"h5\">Are you sure absolutely sure?</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h6",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH6() {\n  return <Text variant=\"h6\">The Joke Tax Chronicles</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "p",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextP() {\n  return <Text variant=\"p\">The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax.</Text>;\n}"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Text",
        "url": "https://ui.camped.academy/docs/components/text",
        "page_title": "Text",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/text"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": []
            },
            {
                "section": "h1",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH1() {\n  return <Text variant=\"h1\">Taxing Laughter: The Joke Tax Chronicles</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h2",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH2() {\n  return <Text variant=\"h2\">The People of the Kingdom</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h3",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH3() {\n  return <Text variant=\"h3\">The Joke Tax</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h4",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH4() {\n  return <Text variant=\"h4\">People stopped telling jokes</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h5",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH5() {\n  return <Text variant=\"h5\">Are you sure absolutely sure?</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "h6",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextH6() {\n  return <Text variant=\"h6\">The Joke Tax Chronicles</Text>;\n}"
                ],
                "subsections": []
            },
            {
                "section": "p",
                "pre_snippets": [
                    "import { Text } from \"@camped-ui/text\";\n \nexport function TextP() {\n  return <Text variant=\"p\">The king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax.</Text>;\n}"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Typewriter Effect",
        "url": "https://ui.camped.academy/docs/components/typewriter-effect",
        "page_title": "Typewriter Effect",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/typewriter-effect"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { TypewriterEffect } from \"@camped-ui/typewriter-effect\";",
                    "<TypewriterEffect words={words} />"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Default",
                        "code_snippets": [
                            "\"use client\";\n \nimport { TypewriterEffectSmooth } from \"@camped-ui/typewriter-effect\";\nimport * as React from \"react\";\n \nexport function TypewriterEffectSmoothDemo() {\n  const words = [\n    {\n      text: \"Build\",\n    },\n    {\n      text: \"awesome\",\n    },\n    {\n      text: \"apps\",\n    },\n    {\n      text: \"with\",\n    },\n    {\n      text: \"CampEd.\",\n      className: \"text-blue-500 dark:text-blue-500\",\n    },\n  ];\n  return (\n    <div className=\"flex flex-col items-center justify-center h-[40rem]  \">\n      <p className=\"text-neutral-600 dark:text-neutral-200 text-xs sm:text-base  \">\n        The road to freedom starts from here\n      </p>\n      <TypewriterEffectSmooth words={words} />\n      <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 space-x-0 md:space-x-4\">\n        <button className=\"w-40 h-10 rounded-xl bg-black border dark:border-white border-transparent text-white text-sm\">\n          Join now\n        </button>\n        <button className=\"w-40 h-10 rounded-xl bg-white text-black border border-black  text-sm\">\n          Signup\n        </button>\n      </div>\n    </div>\n  );\n}"
                        ]
                    },
                    {
                        "subsection": "Smooth animation",
                        "code_snippets": [
                            "\"use client\";\n \nimport { TypewriterEffect } from \"@camped-ui/typewriter-effect\";\nimport * as React from \"react\";\n \nexport function TypewriterEffectDemo() {\n  const words = [\n    {\n      text: \"Build\",\n    },\n    {\n      text: \"awesome\",\n    },\n    {\n      text: \"apps\",\n    },\n    {\n      text: \"with\",\n    },\n    {\n      text: \"CampEd.\",\n      className: \"text-blue-500 dark:text-blue-500\",\n    },\n  ];\n  return (\n    <div className=\"flex flex-col items-center justify-center h-[40rem] \">\n      <p className=\"text-neutral-600 dark:text-neutral-200 text-base  mb-10\">\n        The road to freedom starts from here\n      </p>\n      <TypewriterEffect words={words} />\n      <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 space-x-0 md:space-x-4 mt-10\">\n        <button className=\"w-40 h-10 rounded-xl bg-black border dark:border-white border-transparent text-white text-sm\">\n          Join now\n        </button>\n        <button className=\"w-40 h-10 rounded-xl bg-white text-black border border-black  text-sm\">\n          Signup\n        </button>\n      </div>\n    </div>\n  );\n}"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Modals",
        "url": "https://ui.camped.academy/docs/components/modals",
        "page_title": "404",
        "sections": [
            {
                "section": "This page could not be found.",
                "pre_snippets": [],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Alert Dialog",
        "url": "https://ui.camped.academy/docs/components/alert-dialog",
        "page_title": "Alert Dialog",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/alert-dialog"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@camped-ui/alert-dialog\";",
                    "<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Sheet",
        "url": "https://ui.camped.academy/docs/components/sheet",
        "page_title": "Sheet",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/sheet"
                ],
                "subsections": [
                    {
                        "subsection": "Usage",
                        "code_snippets": [
                            "import {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@camped-ui/sheet\";",
                            "<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>"
                        ]
                    }
                ]
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Side",
                        "code_snippets": [
                            "\"use client\"\n \nimport { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@camped-ui/sheet\"\n \nconst SHEET_SIDES = [\"top\", \"right\", \"bottom\", \"left\"] as const\n \ntype SheetSide = (typeof SHEET_SIDES)[number]\n \nexport function SheetSide() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {SHEET_SIDES.map((side) => (\n        <Sheet key={side}>\n          <SheetTrigger asChild>\n            <Button variant=\"outline\">{side}</Button>\n          </SheetTrigger>\n          <SheetContent side={side}>\n            <SheetHeader>\n              <SheetTitle>Edit profile</SheetTitle>\n              <SheetDescription>\n                Make changes to your profile here. Click save when you're done.\n              </SheetDescription>\n            </SheetHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">\n                  Name\n                </Label>\n                <Input id=\"name\" value=\"Pedro Duarte\" className=\"col-span-3\" />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"username\" className=\"text-right\">\n                  Username\n                </Label>\n                <Input id=\"username\" value=\"@peduarte\" className=\"col-span-3\" />\n              </div>\n            </div>\n            <SheetFooter>\n              <SheetClose asChild>\n                <Button type=\"submit\">Save changes</Button>\n              </SheetClose>\n            </SheetFooter>\n          </SheetContent>\n        </Sheet>\n      ))}\n    </div>\n  )\n}"
                        ]
                    },
                    {
                        "subsection": "Size",
                        "code_snippets": [
                            "<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent className=\"w-[400px] sm:w-[540px]\">\n    <SheetHeader>\n      <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>"
                        ]
                    }
                ]
            }
        ],
        "error": null
    },
    {
        "name": "Popover",
        "url": "https://ui.camped.academy/docs/components/popover",
        "page_title": "Popover",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/popover"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import { Popover, PopoverContent, PopoverTrigger } from \"@camped-ui/popover\";",
                    "<Popover>\n  <PopoverTrigger>Open</PopoverTrigger>\n  <PopoverContent>Place content for the popover here.</PopoverContent>\n</Popover>"
                ],
                "subsections": []
            }
        ],
        "error": null
    },
    {
        "name": "Dialog",
        "url": "https://ui.camped.academy/docs/components/dialog",
        "page_title": "Dialog",
        "sections": [
            {
                "section": "Installation",
                "pre_snippets": [
                    "yarn add @camped-ui/dialog"
                ],
                "subsections": []
            },
            {
                "section": "Usage",
                "pre_snippets": [
                    "import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@camped-ui/dialog\";",
                    "<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you sure absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>"
                ],
                "subsections": []
            },
            {
                "section": "Examples",
                "pre_snippets": [],
                "subsections": [
                    {
                        "subsection": "Custom close button",
                        "code_snippets": [
                            "import { Copy } from \"lucide-react\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@camped-ui/dialog\"\nimport { Input } from \"@camped-ui/input\"\nimport { Label } from \"@camped-ui/label\"\n \nexport function DialogCloseButton() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Share</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Share link</DialogTitle>\n          <DialogDescription>\n            Anyone who has this link will be able to view this.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"grid flex-1 gap-2\">\n            <Label htmlFor=\"link\" className=\"sr-only\">\n              Link\n            </Label>\n            <Input\n              id=\"link\"\n              defaultValue=\"https://ui.camped.com/docs/installation\"\n              readOnly\n            />\n          </div>\n          <Button type=\"submit\" size=\"sm\" className=\"px-3\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <DialogFooter className=\"sm:justify-start\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}"
                        ]
                    }
                ]
            },
            {
                "section": "Notes",
                "pre_snippets": [
                    "<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you sure absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently\n        delete this file from our servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"
                ],
                "subsections": []
            }
        ],
        "error": null
    }
]