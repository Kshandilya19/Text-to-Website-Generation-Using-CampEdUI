[
  {
    "component": "Radio Group",
    "section": "Usage",
    "prompt": "In your React app, import the Radio Group component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\n\n<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>"
  },
  {
    "component": "Button",
    "section": "Examples → As Child",
    "prompt": "In a form where you need a as child Button, use CampEdUI’s Button component with the 'as child' variant. Include the import and the JSX markup for a standalone as child Button.",
    "code": "import Link from \"next/link\"\n \nimport { Button } from \"@camped-ui/button\"\n \nexport function ButtonAsChild() {\n  return (\n    <Button asChild>\n      <Link href=\"/login\">Login</Link>\n    </Button>\n  )\n}"
  },
  {
    "component": "Tabs",
    "section": "Usage",
    "prompt": "In your React app, import the Tabs component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\n\n<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>"
  },
  {
    "component": "Badge",
    "section": "Usage → Link",
    "prompt": "Create a link-styled Badge that wraps an anchor to `/profile`, using CampEdUI’s `badgeVariants`; include the import and the JSX for `<Badge asChild><Link …>`.",
    "code": "import { badgeVariants } from \"@camped-ui/badge\";\n\n<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>"
  },
  {
    "component": "Menubar",
    "section": "Usage",
    "prompt": "In your React app, import the Menubar component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@camped-ui/menubar\";\n\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>"
  },
  {
    "component": "Combobox",
    "section": "Examples → Combobox",
    "prompt": "In a form where you need a combobox Combobox, use CampEdUI’s Combobox component with the 'combobox' variant. Include the import and the JSX markup for a standalone combobox Combobox.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue)\n                  setOpen(false)\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}"
  },
  {
    "component": "Stepper",
    "section": "Examples → Variants",
    "prompt": "In a form where you need a variants Stepper, use CampEdUI’s Stepper component with the 'variants' variant. Include the import and the JSX markup for a standalone variants Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Label } from \"@camped-ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\";\nimport {\n  Step,\n  StepItem,\n  Stepper,\n  useStepper,\n  type StepperProps,\n} from \"@camped-ui/stepper\";\nimport * as React from \"react\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  const [variant, setVariant] =\n    React.useState<StepperProps[\"variant\"]>(\"circle\");\n \n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <RadioGroup\n        className=\"mb-10\"\n        value={variant}\n        onValueChange={(value) => setVariant(value as StepperProps[\"variant\"])}\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle\" id=\"circle\" />\n          <Label htmlFor=\"circle\">circle</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"circle-alt\" id=\"circle-alt\" />\n          <Label htmlFor=\"circle-alt\">circle-alt</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"line\" id=\"line\" />\n          <Label htmlFor=\"line\">line</Label>\n        </div>\n      </RadioGroup>\n      <Stepper variant={variant} initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Stepper",
    "section": "Examples → With Forms",
    "prompt": "In a form where you need a with forms Stepper, use CampEdUI’s Stepper component with the 'with forms' variant. Include the import and the JSX markup for a standalone with forms Stepper.",
    "code": "\"use client\";\n \nimport { Button } from \"@camped-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\";\nimport { Input } from \"@camped-ui/input\";\nimport { Step, Stepper, useStepper } from \"@camped-ui/stepper\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n \nconst steps = [\n  { label: \"Step 1\", description: \"Description 1\" },\n  { label: \"Step 2\", description: \"Description 2\" },\n];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper variant=\"circle-alt\" initialStep={0} steps={steps}>\n        {steps.map((stepProps, index) => {\n          if (index === 0) {\n            return (\n              <Step key={stepProps.label} {...stepProps}>\n                <FirstStepForm />\n              </Step>\n            );\n          }\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <SecondStepForm />\n            </Step>\n          );\n        })}\n        <MyStepperFooter />\n      </Stepper>\n    </div>\n  );\n}\n \nconst FirstFormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n});\n \nfunction FirstStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof FirstFormSchema>>({\n    resolver: zodResolver(FirstFormSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof FirstFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"camped\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nconst SecondFormSchema = z.object({\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n});\n \nfunction SecondStepForm() {\n  const { nextStep } = useStepper();\n \n  const form = useForm<z.infer<typeof SecondFormSchema>>({\n    resolver: zodResolver(SecondFormSchema),\n    defaultValues: {\n      password: \"\",\n    },\n  });\n \n  function onSubmit(data: z.infer<typeof SecondFormSchema>) {\n    nextStep();\n    // Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormDescription>This is your private password.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <StepperFormActions />\n      </form>\n    </Form>\n  );\n}\n \nfunction StepperFormActions() {\n  const {\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n \n  return (\n    <div className=\"w-full flex justify-end gap-2\">\n      {hasCompletedAllSteps ? (\n        <Button size=\"sm\" onClick={resetSteps}>\n          Reset\n        </Button>\n      ) : (\n        <>\n          <Button\n            disabled={isDisabledStep}\n            onClick={prevStep}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            Prev\n          </Button>\n          <Button size=\"sm\">\n            {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n \nfunction MyStepperFooter() {\n  const { activeStep, resetSteps, steps } = useStepper();\n \n  if (activeStep !== steps.length) {\n    return null;\n  }\n \n  return (\n    <div className=\"flex items-center justify-end gap-2\">\n      <Button onClick={resetSteps}>Reset Stepper with Form</Button>\n    </div>\n  );\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Interaction",
    "prompt": "In a form where you need a interaction Tag Input, use CampEdUI’s Tag Input component with the 'interaction' variant. Include the import and the JSX markup for a standalone interaction Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputInteraction() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [interactionTags, setInteractionTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"clickable\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"clickable\">Clickable</TabsTrigger>\n        <TabsTrigger value=\"non-clickable\">Non-Clickable</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"clickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"non-clickable\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={interactionTags}\n          interaction=\"nonClickable\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setInteractionTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Data Table",
    "section": "Reusable Components → Column header",
    "prompt": "Create a Data Table example for the 'Column header' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\nimport { cn } from \"@camped-ui/lib\";\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  CaretSortIcon,\n  EyeNoneIcon,\n} from \"@radix-ui/react-icons\";\nimport { Column } from \"@tanstack/react-table\";\n \ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n \nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n \n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUpIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDownIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeNoneIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n  },\n]"
  },
  {
    "component": "Alert",
    "section": "Usage",
    "prompt": "In a user-settings form, show a non-destructive Alert at the top with a blue info icon and a close button; include the import and minimal JSX.",
    "code": "import { Alert, AlertDescription, AlertTitle } from \"@camped-ui/alert\";\n\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>"
  },
  {
    "component": "Separator",
    "section": "Usage",
    "prompt": "In your React app, import the Separator component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Separator } from \"@camped-ui/separator\";\n\n<Separator />"
  },
  {
    "component": "Typewriter Effect",
    "section": "Usage",
    "prompt": "In your React app, import the Typewriter Effect component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { TypewriterEffect } from \"@camped-ui/typewriter-effect\";\n\n<TypewriterEffect words={words} />"
  },
  {
    "component": "Tree View",
    "section": "Examples → With Build-in select",
    "prompt": "In a form where you need a with build-in select Tree View, use CampEdUI’s Tree View component with the 'with build-in select' variant. Include the import and the JSX markup for a standalone with build-in select Tree View.",
    "code": "import { TreeView } from \"@camped-ui/tree-view\";\n \nconst TreeViewBuiltinSelect = () => {\n  const elements = [\n    {\n      id: \"1\",\n      name: \"Element 1\",\n      children: [\n        {\n          id: \"1.1\",\n          name: \"Element 1.1\",\n          children: [\n            {\n              id: \"1.1.1\",\n              name: \"Element 1.1.1\",\n            },\n            {\n              id: \"1.1.2\",\n              name: \"Element 1.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"1.2\",\n          name: \"Element 1.2\",\n        },\n      ],\n    },\n    {\n      id: \"2\",\n      name: \"Element 2\",\n      children: [\n        {\n          id: \"2.1\",\n          name: \"Element 2.1\",\n          children: [\n            {\n              id: \"2.1.1\",\n              name: \"Element 2.1.1\",\n            },\n            {\n              id: \"2.1.2\",\n              name: \"Element 2.1.2\",\n            },\n          ],\n        },\n        {\n          id: \"2.2\",\n          name: \"Element 2.2\",\n        },\n      ],\n    },\n    {\n      id: \"3\",\n      name: \"Element 3\",\n    },\n  ];\n \n  return (\n    <TreeView\n      elements={elements}\n      className=\"h-60\"\n      initialExpendedItems={[\"2\"]}\n      initialSelectedId=\"1.1.2\"\n    />\n  );\n};\n \nexport TreeViewBuiltinSelect;"
  },
  {
    "component": "Textarea",
    "section": "Examples → Disabled",
    "prompt": "In a form where you need a disabled Textarea, use CampEdUI’s Textarea component with the 'disabled' variant. Include the import and the JSX markup for a standalone disabled Textarea.",
    "code": "import { Textarea } from \"@camped-ui/textarea\"\n \nexport function TextareaDisabled() {\n  return <Textarea placeholder=\"Type your message here.\" disabled />\n}"
  },
  {
    "component": "Breadcrumb",
    "section": "Usage",
    "prompt": "On a product detail page, display a breadcrumb like Home / Shop / Sneakers; include the import and JSX for `<Breadcrumb>` with three items.",
    "code": "import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\"\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>"
  },
  {
    "component": "Tag Input",
    "section": "Props → Draggable",
    "prompt": "Create a Tag Input example for the 'Draggable' scenario using CampEdUI. Include any necessary imports and the minimal JSX to render it.",
    "code": "import { Label } from \"@camped-ui/label\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputDraggableTags() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n \n  const [allowDraggableTags, setAllowDraggableTags] =\n    React.useState<TagType[]>(tags);\n  return (\n    <div>\n      <Label>Topics</Label>\n      <TagInput\n        placeholder=\"Enter a topic\"\n        tags={allowDraggableTags}\n        draggable\n        className=\"sm:min-w-[450px]\"\n        setTags={(newTags) => {\n          setAllowDraggableTags(newTags);\n        }}\n      />\n    </div>\n  );\n}"
  },
  {
    "component": "Dialog",
    "section": "Usage",
    "prompt": "In your React app, import the Dialog component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@camped-ui/dialog\";\n\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you sure absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>"
  },
  {
    "component": "Button",
    "section": "Usage",
    "prompt": "On a signup form, render a primary Button labeled “Sign Up” that spans the full width of the form; include import and `<Button variant=\"primary\" fullWidth>` JSX.",
    "code": "import { Button } from \"@camped-ui/button\";"
  },
  {
    "component": "Command",
    "section": "Examples → Dialog",
    "prompt": "In a form where you need a dialog Command, use CampEdUI’s Command component with the 'dialog' variant. Include the import and the JSX markup for a standalone dialog Command.",
    "code": "\"use client\"\n \nimport * as React from \"react\"\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n \nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@camped-ui/command\"\n \nexport function CommandDialogDemo() {\n  const [open, setOpen] = React.useState(false)\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n \n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n \n  return (\n    <>\n      <p className=\"text-sm text-muted-foreground\">\n        Press{\" \"}\n        <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n          <span className=\"text-xs\">⌘</span>J\n        </kbd>\n      </p>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile className=\"mr-2 h-4 w-4\" />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem>\n              <Calculator className=\"mr-2 h-4 w-4\" />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n              <CommandShortcut>⌘P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              <span>Billing</span>\n              <CommandShortcut>⌘B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n              <CommandShortcut>⌘S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}\n\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false);\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n \n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  );\n}"
  },
  {
    "component": "Scroll Area",
    "section": "Usage",
    "prompt": "In your React app, import the Scroll Area component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { ScrollArea } from \"@camped-ui/scroll-area\";\n\n<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving\n  jokes all over the place: under the king's pillow, in his soup, even in the\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n  then, one day, the people of the kingdom discovered that the jokes left by\n  Jokester were so funny that they couldn't help but laugh. And once they\n  started laughing, they couldn't stop.\n</ScrollArea>"
  },
  {
    "component": "Navigation Menu",
    "section": "Examples → Link Component",
    "prompt": "In a form where you need a link component Navigation Menu, use CampEdUI’s Navigation Menu component with the 'link component' variant. Include the import and the JSX markup for a standalone link component Navigation Menu.",
    "code": "import { navigationMenuTriggerStyle } from \"@camped-ui/navigation-menu\";\n\n<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n      Documentation\n    </NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>"
  },
  {
    "component": "Combobox",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Combobox, use CampEdUI’s Combobox component with the 'form' variant. Include the import and the JSX markup for a standalone form Combobox.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { cn } from \"@camped-ui/lib\"\nimport { Button } from \"@camped-ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@camped-ui/command\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@camped-ui/popover\"\n \nconst languages = [\n  { label: \"English\", value: \"en\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Portuguese\", value: \"pt\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Korean\", value: \"ko\" },\n  { label: \"Chinese\", value: \"zh\" },\n] as const\n \nconst FormSchema = z.object({\n  language: z.string({\n    required_error: \"Please select a language.\",\n  }),\n})\n \nexport function ComboboxForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"language\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Language</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      className={cn(\n                        \"w-[200px] justify-between\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value\n                        ? languages.find(\n                            (language) => language.value === field.value\n                          )?.label\n                        : \"Select language\"}\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-[200px] p-0\">\n                  <Command>\n                    <CommandInput placeholder=\"Search language...\" />\n                    <CommandEmpty>No language found.</CommandEmpty>\n                    <CommandGroup>\n                      {languages.map((language) => (\n                        <CommandItem\n                          value={language.label}\n                          key={language.value}\n                          onSelect={() => {\n                            form.setValue(\"language\", language.value)\n                          }}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              language.value === field.value\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                            )}\n                          />\n                          {language.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                This is the language that will be used in the dashboard.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Multi Select",
    "section": "Examples → Multi-Select with Limit",
    "prompt": "In a form where you need a multi-select with limit Multi Select, use CampEdUI’s Multi Select component with the 'multi-select with limit' variant. Include the import and the JSX markup for a standalone multi-select with limit Multi Select.",
    "code": "\"use client\";\n \nimport {\n  MultiSelector,\n  MultiSelectorContent,\n  MultiSelectorInput,\n  MultiSelectorItem,\n  MultiSelectorList,\n  MultiSelectorTrigger,\n} from \"@camped-ui/multi-select\";\nimport { useState } from \"react\";\n \nconst MultiSelectWithLimit = () => {\n  const [value, setValue] = useState<string[]>([]);\n \n  return (\n    <MultiSelector values={value} onValuesChange={setValue} limit={3}>\n      <MultiSelectorTrigger>\n        <MultiSelectorInput placeholder=\"Select items\" />\n      </MultiSelectorTrigger>\n      <MultiSelectorContent>\n        <MultiSelectorList>\n          <MultiSelectorItem value=\"Item 1\">Item 1</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 2\">Item 2</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 3\">Item 3</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 4\">Item 4</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 5\">Item 5</MultiSelectorItem>\n          <MultiSelectorItem value=\"Item 6\">Item 6</MultiSelectorItem>\n        </MultiSelectorList>\n      </MultiSelectorContent>\n    </MultiSelector>\n  );\n};\n \nexport MultiSelectWithLimit;"
  },
  {
    "component": "Breadcrumb",
    "section": "Examples → BreadCrumb Active Item",
    "prompt": "Render a breadcrumb where the last item is shown as active (non-clickable); include import and the JSX for active link styling.",
    "code": "\"use client\";\n \nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbSeparator,\n} from \"@camped-ui/breadcrumb\";\nimport Link from \"next/link\";\nimport { useSearchParams } from \"next/navigation\";\n \nconst Pages = [\n  {\n    title: \"Home\",\n    path: \"/\",\n  },\n  {\n    title: \"Components\",\n    path: \"/docs/components\",\n  },\n  {\n    title: \"Breadcrumb\",\n    path: \"/docs/components/breadcrumb\",\n  },\n];\n \nconst BreadCrumbActiveItem = () => {\n  const searchParams = useSearchParams();\n  const path = searchParams?.get(\"path\");\n  return (\n    <Breadcrumb\n      orientation=\"horizontal\"\n      variant={\"ghost\"}\n      className=\"gap-1 bg-background rounded-lg p-2\"\n    >\n      {Pages.map((page, index) => {\n        const isActive = path === page.path;\n        return (\n          <div key={`${page.title}-path`} className=\"flex items-center gap-1\">\n            <BreadcrumbItem\n              isActive={isActive}\n              index={index}\n              className=\"h-8 px-2 \"\n              activeVariant={{\n                variant: \"default\",\n              }}\n            >\n              <Link scroll={false} href={`?path=${page.path}`}>\n                {page.title}\n              </Link>\n            </BreadcrumbItem>\n            {index !== Pages.length - 1 && <BreadcrumbSeparator />}\n          </div>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n \nexport BreadCrumbActiveItem;"
  },
  {
    "component": "Checkbox",
    "section": "Usage",
    "prompt": "In your React app, import the Checkbox component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { Checkbox } from \"@camped-ui/checkbox\";\n\n<Checkbox />"
  },
  {
    "component": "Stepper",
    "section": "Examples → Clickable steps",
    "prompt": "In a form where you need a clickable steps Stepper, use CampEdUI’s Stepper component with the 'clickable steps' variant. Include the import and the JSX markup for a standalone clickable steps Stepper.",
    "code": "import { Button } from \"@camped-ui/button\";\nimport { Step, StepItem, Stepper, useStepper } from \"@camped-ui/stepper\";\n \nconst steps = [\n  { label: \"Step 1\" },\n  { label: \"Step 2\" },\n  { label: \"Step 3\" },\n] satisfies StepItem[];\n \nexport function StepperDemo() {\n  return (\n    <div className=\"flex w-full flex-col gap-4\">\n      <Stepper\n        initialStep={0}\n        steps={steps}\n        onClickStep={(step, setStep) => {\n          // Add Toast\n          setStep(step);\n        }}\n      >\n        {steps.map((stepProps, index) => {\n          return (\n            <Step key={stepProps.label} {...stepProps}>\n              <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n                <h1 className=\"text-xl\">Step {index + 1}</h1>\n              </div>\n            </Step>\n          );\n        })}\n        <Footer />\n      </Stepper>\n    </div>\n  );\n}\n \nconst Footer = () => {\n  const {\n    nextStep,\n    prevStep,\n    resetSteps,\n    isDisabledStep,\n    hasCompletedAllSteps,\n    isLastStep,\n    isOptionalStep,\n  } = useStepper();\n  return (\n    <>\n      {hasCompletedAllSteps && (\n        <div className=\"h-40 flex items-center justify-center my-4 border bg-secondary text-primary rounded-md\">\n          <h1 className=\"text-xl\">Woohoo! All steps completed! 🎉</h1>\n        </div>\n      )}\n      <div className=\"w-full flex justify-end gap-2\">\n        {hasCompletedAllSteps ? (\n          <Button size=\"sm\" onClick={resetSteps}>\n            Reset\n          </Button>\n        ) : (\n          <>\n            <Button\n              disabled={isDisabledStep}\n              onClick={prevStep}\n              size=\"sm\"\n              variant=\"secondary\"\n            >\n              Prev\n            </Button>\n            <Button size=\"sm\" onClick={nextStep}>\n              {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};"
  },
  {
    "component": "Radio Group",
    "section": "Examples → Form",
    "prompt": "In a form where you need a form Radio Group, use CampEdUI’s Radio Group component with the 'form' variant. Include the import and the JSX markup for a standalone form Radio Group.",
    "code": "\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n \nimport { Button } from \"@camped-ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@camped-ui/form\"\nimport { RadioGroup, RadioGroupItem } from \"@camped-ui/radio-group\"\n \nconst FormSchema = z.object({\n  type: z.enum([\"all\", \"mentions\", \"none\"], {\n    required_error: \"You need to select a notification type.\",\n  }),\n})\n \nexport function RadioGroupForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  })\n \n  function onSubmit(data: z.infer<typeof FormSchema>) {\n// Add Toast\n  }\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-3\">\n              <FormLabel>Notify me about...</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className=\"flex flex-col space-y-1\"\n                >\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"all\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      All new messages\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"mentions\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">\n                      Direct messages and mentions\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"none\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">Nothing</FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Small",
    "prompt": "In a form where you need a small Toggle Group, use CampEdUI’s Toggle Group component with the 'small' variant. Include the import and the JSX markup for a standalone small Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup size={\"sm\"} type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Button",
    "section": "Examples → Link",
    "prompt": "In a form where you need a link Button, use CampEdUI’s Button component with the 'link' variant. Include the import and the JSX markup for a standalone link Button.",
    "code": "import { Button } from \"@camped-ui/button\"\n \nexport function ButtonLink() {\n  return <Button variant=\"link\">Link</Button>\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Size",
    "prompt": "In a form where you need a size Tag Input, use CampEdUI’s Tag Input component with the 'size' variant. Include the import and the JSX markup for a standalone size Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputVariant() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [sizeTags, setSizeTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"small\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"small\">Small</TabsTrigger>\n        <TabsTrigger value=\"medium\">Medium</TabsTrigger>\n        <TabsTrigger value=\"large\">Large</TabsTrigger>\n        <TabsTrigger value=\"x-large\">X-Large</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"small\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"sm\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"medium\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"md\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"lg\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"x-large\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={sizeTags}\n          size=\"xl\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setSizeTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Toggle Group",
    "section": "Examples → Outline",
    "prompt": "In a form where you need a outline Toggle Group, use CampEdUI’s Toggle Group component with the 'outline' variant. Include the import and the JSX markup for a standalone outline Toggle Group.",
    "code": "import { Bold, Italic, Underline } from \"lucide-react\"\n \nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@camped-ui/toggle-group\"\n \nexport function ToggleGroupDemo() {\n  return (\n    <ToggleGroup variant=\"outline\" type=\"multiple\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle bold\">\n        <Bold className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\">\n        <Italic className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle strikethrough\">\n        <Underline className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}"
  },
  {
    "component": "Input",
    "section": "Examples → With Button",
    "prompt": "In a form where you need a with button Input, use CampEdUI’s Input component with the 'with button' variant. Include the import and the JSX markup for a standalone with button Input.",
    "code": "import { Button } from \"@camped-ui/button\"\nimport { Input } from \"@camped-ui/input\"\n \nexport function InputWithButton() {\n  return (\n    <div className=\"flex w-full max-w-sm items-center space-x-2\">\n      <Input type=\"email\" placeholder=\"Email\" />\n      <Button type=\"submit\">Subscribe</Button>\n    </div>\n  )\n}"
  },
  {
    "component": "Tag Input",
    "section": "Examples → Border",
    "prompt": "In a form where you need a border Tag Input, use CampEdUI’s Tag Input component with the 'border' variant. Include the import and the JSX markup for a standalone border Tag Input.",
    "code": "import { cn } from \"@camped-ui/lib\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@camped-ui/tabs\";\nimport { TagType, TagInput } from \"@camped-ui/tag-input\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n \nexport function TagInputBorder() {\n  const tags: TagType[] = [\n    { id: uuid(), text: \"Sports\" },\n    { id: uuid(), text: \"Programming\" },\n    { id: uuid(), text: \"Travel\" },\n  ];\n  const [borderTags, setBorderTags] = React.useState<TagType[]>(tags);\n  return (\n    <Tabs defaultValue=\"default\" className=\"w-full mt-4\">\n      <TabsList\n        className={cn(\n          \"mb-4 w-full overflow-x-auto h-auto overflow-y-hidden justify-start\"\n        )}\n      >\n        <TabsTrigger value=\"default\">Default</TabsTrigger>\n        <TabsTrigger value=\"none\">No border</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"default\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"default\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n      <TabsContent value=\"none\">\n        <TagInput\n          placeholder=\"Enter a topic\"\n          tags={borderTags}\n          borderStyle=\"none\"\n          className=\"sm:min-w-[450px]\"\n          setTags={(newTags) => {\n            setBorderTags(newTags);\n          }}\n        />\n      </TabsContent>\n    </Tabs>\n  );\n}"
  },
  {
    "component": "Dropdown Menu",
    "section": "Usage",
    "prompt": "In your React app, import the Dropdown Menu component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@camped-ui/dropdown-menu\";\n\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>"
  },
  {
    "component": "Toggle Group",
    "section": "Usage",
    "prompt": "In your React app, import the Toggle Group component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import { ToggleGroup, ToggleGroupItem } from \"@camped-ui/toggle-group\";\n\n<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>"
  },
  {
    "component": "Card",
    "section": "Usage",
    "prompt": "In your React app, import the Card component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@camped-ui/card\";\n\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>"
  },
  {
    "component": "Pagination",
    "section": "Usage",
    "prompt": "In your React app, import the Pagination component from CampEdUI and render it using the default styling as shown in the usage example.",
    "code": "import {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@camped-ui/pagination\"\n\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"
  }
]